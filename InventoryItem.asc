bool HasUsedCompact(this InventoryItem*)
{
  this.GetProperty("usedCompact");
}

bool HasUsedClearTape(this InventoryItem*)
{
  this.GetProperty("usedClearTape");
}

function SetUsedCompact(this InventoryItem*,  bool usedCompact)
{
  this.SetProperty("usedCompact", usedCompact);
}

function SetUsedClearTape(this InventoryItem*,  bool usedClearTape)
{
  this.SetProperty("usedClearTape", usedClearTape);
}

bool IsFingerprintable(this InventoryItem*)
{
  this.GetProperty("fingerprintable");
}

bool HasFingerprint(this InventoryItem*)
{
  this.GetProperty("hasFingerprint");
}

function SetFingerprintable(this InventoryItem*,  bool fingerprintable)
{
  this.SetProperty("fingerprintable", fingerprintable);
}

function SetFingerprint(this InventoryItem*,  bool hasFingerprint)
{
  this.SetProperty("hasFingerprint", hasFingerprint);
}

function HandleLeftClick(this InventoryItem*)
{
  
  switch(this)
  {
    case iCrumpledMagazine:
      this.RunInteraction(mouse.Mode);
      break;
    default:
      invCursorToggle = true;
      if (mouse.Mode == eModeInteract)
        player.ActiveInventory = this;
      else
        this.RunInteraction(mouse.Mode);
      break;
  }
}

function HandleRightClick(this InventoryItem*)
{ 
  switch(this)
  {
    case iCrumpledMagazine:
    case iMagazine:
      this.RunInteraction(mouse.Mode);
      break;
    default:
      Display(String.Format("item name: %s", this.Name));
      break;
  }
}