
//=============================================================================
// INITIALIZATION
//=============================================================================

// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

function initialize_icon_bar()
{
  if (!cEgo.HasInventory(iTape))
  {
    btnCompactTape.Clickable = false;
    btnCompactTape.NormalGraphic = 0;
    btnCompactTape.MouseOverGraphic = 0;
    btnCompactTape.PushedGraphic = 0;
  }
  
  if (!cEgo.HasInventory(iLipstick))
  {
    btnLipstick.Clickable = false;
    btnLipstick.NormalGraphic = 0;
    btnLipstick.MouseOverGraphic = 0;
    btnLipstick.PushedGraphic = 0;
  }
  
  if (!cEgo.HasInventory(iLens))
  {
    btnLens.Clickable = false;
    btnLens.NormalGraphic = 0;
    btnLens.MouseOverGraphic = 0;
    btnLens.PushedGraphic = 0;
  }
}

function initialize_game_options()
{
  SetGameOption(OPT_PORTRAITPOSITION, 3);
  SetGameSpeed(80);
}

function initialize_notebook()
{
  initialize_notebook_characters();
  gNotebook1.Visible = false;
}

// called when the game starts, before the first room is loaded
function game_start()
{
  initialize_control_panel();
  initialize_icon_bar();
  initialize_notebook();
  initialize_game_options();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;

  // Auto-save on the save slot 999
  SetRestartPoint();
}

//=============================================================================
// Common GUI functions
//=============================================================================

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  if (gui_to_open != gInventory)
  {
    lblOverHotspot.Visible = false;
  }

  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

//=============================================================================
// ICONBAR
//=============================================================================

function btnIconSave_Click(GUIControl *control, MouseButton button)
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function btnIconPanel_Click(GUIControl *control, MouseButton button)
{
  open_gui(gPanel);
}

function btnIconExit_Click(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

//=============================================================================
// INVENTORY WINDOW
//=============================================================================

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button)
{
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;
  }
  invCursorToggle = true;
}

function iCigar_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_CigarDesc.Start();
}

function iCompact_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_CompactDesc.Start();
}

function iMagazine_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_MagazineDesc.Start();
}

function iNotebook_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_NotebookDesc.Start();
}

function iCrumpledMagazine_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_MagazineDesc.Start();
}

function iTape_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_TapeDesc.Start();
}

function iGreenThread_Look(InventoryItem *theItem, CursorMode mode)
{
  dPrologue_GreenThreadDesc.Start();
}

//=============================================================================
// CONTROL PANEL
//=============================================================================

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("%s\nAGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (Speech.VoiceMode == eSpeechVoiceAndText)
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (Speech.VoiceMode == eSpeechVoiceOnly)
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (Speech.VoiceMode == eSpeechTextOnly)
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

//=============================================================================
// SAVE / LOAD DIALOGS
//=============================================================================

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int slots_used = 0;

  // record which slots are occupied already, 
  // if the types save name matches any existing one, then use that
  for (int i = 0; i < lstSaveGamesList.ItemCount; i++)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    slots_used++;
  }
  
  // current version of AGS has a limit of 50 save slots
  // that may be displayed in the ListBox at the same time
  if (slots_used >= 50)
  {
    return -1;
  }

  // find first free save slot, starting with slot 1 (for "cosmetic" purposes)
  for (int i = 1; i < 999; i++)
  {
    if (!slots[i])
    {
      return i;
    }
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Save slots limit of 50 is reached, delete some of the existing saves first!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

//=============================================================================
// RESTART DIALOG
//=============================================================================

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

//=============================================================================
// QUIT DIALOG
//=============================================================================

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

//=============================================================================
// PLAYER INPUT
//=============================================================================

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

function handle_room_click(MouseButton button)
{
  if (button == eMouseRight && invCursorToggle)
  {
    invCursorToggle = false;
    return;
  }
  if (button == eMouseLeft)
  {
    if (mouse.Mode == eModeEmpty)
    {
      timeToShowInvalid = (GetGameSpeed() * NUMBER_SECS_SHOW_INVALID_CURSOR);
      mouse.Mode = eModeInvalid;
      return;
    }
    
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode);
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    mouse.Mode = eModeLookat;
    if ((Mouse.IsOverWalkableArea() || Mouse.IsOverNothing()) && !(Mouse.IsOverHotspot()))
    {
      Display("You see nothing of interest");
      choose_cursor();
    }
    else
    {
      Room.ProcessClick(mouse.x, mouse.y, eModeLookat);
    }
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  }
}

function handle_inventory_click(MouseButton button)
{
  if (button == eMouseRightInv) return;
  
  if (button == eMouseMiddleInv) return;
  
  // InventoryItem.GetAtScreenXY could return null here
  // so using game.inv_activated instead is a safer option
  InventoryItem* item = inventory[game.inv_activated];
  
  if (button == eMouseLeftInv)
  {
    invCursorToggle = true;
    if (mouse.Mode == eModeInteract)
    {
      // interact mode selects an inventory item
      player.ActiveInventory = item;
    }
    else if (mouse.Mode == eModeUseinv)
    {
      if (item.ID != player.ActiveInventory.ID)
      {
        // use one item on another
        item.RunInteraction(eModeUseinv);
      }
    }
    else
    {
      // otherwise run corresponding interaction (LookAt, etc)
      item.RunInteraction(mouse.Mode);
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeftInv || button == eMouseRightInv || button == eMouseMiddleInv)
  {
    handle_inventory_click(button);
  }
  // game is paused, then don't process mouse clicks inside the room
  else if (!IsGamePaused())
  {
    handle_room_click(button);
  }
}

//=============================================================================
// GAME EVENTS
//=============================================================================

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  choose_cursor();
  handle_time();
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  handle_overlays();
}

function late_repeatedly_execute_always()
{
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      //player.Say("I see nothing special about it.");
      Display("You see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      //player.Say("Looks alright.");
      Display("You see nothing special about it.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

//=============================================================================
// Global interactions: Characters, Inventory items, ...
//=============================================================================

//
// cEgo
//
function cEgo_Look(Character *thisCharacter, CursorMode mode)
{
  cEgo_LookHandler(thisCharacter, mode);
}

function cEgo_Talk(Character *thisCharacter, CursorMode mode)
{
  cEgo_TalkHandler(thisCharacter, mode);
}

//
// cStone
//
function cStone_Look(Character *thisCharacter, CursorMode mode)
{
  cStone_LookHandler(thisCharacter, mode);
}

function cStone_Talk(Character *thisCharacter, CursorMode mode)
{
  cStone_TalkHandler(thisCharacter, mode);
}

//
// cVera
//
function cVera_Look(Character *thisCharacter, CursorMode mode)
{
  cVera_LookHandler(thisCharacter, mode);
}

function cVera_Talk(Character *thisCharacter, CursorMode mode)
{
  cVera_TalkHandler(thisCharacter, mode);
}

//
// cJoanna
//
function cJoanna_Look(Character *theCharacter, CursorMode mode)
{
  dAll_JoannaDesc.Start();
}

function cJoanna_Talk(Character *theCharacter, CursorMode mode)
{
  cJoanna_TalkHandler(theCharacter, mode);
}

function cJoanna_UseInv(Character *theCharacter, CursorMode mode)
{
  cJoanna_UseInvHandler(theCharacter,  mode);
}

//
// cSalvatore
//
function cSalvatore_Look(Character *thisCharacter, CursorMode mode)
{
  cSalvatore_LookHandler(thisCharacter, mode);
}

function cSalvatore_Talk(Character *thisCharacter, CursorMode mode)
{
  cSalvatore_TalkHandler(thisCharacter, mode);
}

//
// cQueenie
//
function cQueenie_Look(Character *theCharacter, CursorMode mode)
{
  dAll_QueenieDesc.Start();
}

function cQueenie_Talk(Character *theCharacter, CursorMode mode)
{
  cQueenie_TalkHandler(theCharacter, mode);
}

function cQueenie_UseInv(Character *theCharacter, CursorMode mode)
{
  cQueenie_UseInvHandler(theCharacter,  mode);
}

//
// cMax
//
function cMax_Look(Character *thisCharacter, CursorMode mode)
{
  cMax_LookHandler(thisCharacter, mode);
}

function cMax_Talk(Character *thisCharacter, CursorMode mode)
{
  cMax_TalkHandler(thisCharacter, mode);
}

//
// cTeresa
//
function cTeresa_Look(Character *thisCharacter, CursorMode mode)
{
  cTeresa_LookHandler(thisCharacter, mode);
}

function cTeresa_Talk(Character *thisCharacter, CursorMode mode)
{
  cTeresa_TalkHandler(thisCharacter, mode);
}

//
// cLucinda
//
function cLucinda_Look(Character *thisCharacter, CursorMode mode)
{
  cLucinda_LookHandler(thisCharacter, mode);
}

function cLucinda_Talk(Character *thisCharacter, CursorMode mode)
{
  cLucinda_TalkHandler(thisCharacter, mode);
}

//
// cSamir
//
function cSamir_Look(Character *thisCharacter, CursorMode mode)
{
  cSamir_LookHandler(thisCharacter, mode);
}

function cSamir_Talk(Character *thisCharacter, CursorMode mode)
{
  cSamir_TalkHandler(thisCharacter, mode);
}

//
// cDrkhan
//
function cDrkhan_Look(Character *thisCharacter, CursorMode mode)
{
  cDrkhan_LookHandler(thisCharacter, mode);
}

function cDrkhan_Talk(Character *thisCharacter, CursorMode mode)
{
  cDrkhan_TalkHandler(thisCharacter, mode);
}

//
// cCarlos
//
function cCarlos_Look(Character *theCharacter, CursorMode mode)
{
  dAll_CarlosDesc.Start();
}

function cCarlos_Talk(Character *theCharacter, CursorMode mode)
{
  cCarlos_TalkHandler(theCharacter, mode);
}

function cCarlos_UseInv(Character *theCharacter, CursorMode mode)
{
  cCarlos_UseInvHandler(theCharacter,  mode);
}

//
// cFlAttend
//
function cFlAttend_Look(Character *thisCharacter, CursorMode mode)
{
  dPrologue_FlAttendDesc.Start();
}

function cFlAttend_Talk(Character *thisCharacter, CursorMode mode)
{
  cFlAttend_TalkHandler(thisCharacter, mode);
}

//
// cPilot
//
function cPilot_Look(Character *thisCharacter, CursorMode mode)
{
  dPrologue_PilotDesc.Start();
}

function cPilot_Talk(Character *thisCharacter, CursorMode mode)
{
  cPilot_TalkHandler(thisCharacter, mode);
}

//
// cCopilot
//
function cCopilot_Look(Character *thisCharacter, CursorMode mode)
{
  dPrologue_CopilotDesc.Start();
}

function cCopilot_Talk(Character *thisCharacter, CursorMode mode)
{
  cCopilot_TalkHandler(thisCharacter, mode);
}

/////

/*
/*
function cCopilot_Look(Character *theCharacter, CursorMode mode)
{
  Display("The copilot");
}

function cPilot_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(157, 118, eBlock, eWalkableAreas);
  cEgo.FaceDirection(eDirectionLeft);
  theCharacter.LockView(PILOTSEATED_1705);
  theCharacter.Animate(2, 9, eOnce, eBlock, eForwards);
  theCharacter.Say("this is a talking picture.");
  theCharacter.Animate(2, 9, eOnce, eBlock, eBackwards);
  theCharacter.Loop = 1;
  theCharacter.UnlockView();
}

function cPilot_Look(Character *theCharacter, CursorMode mode)
{
  Display("The pilot");
}

function cCopilot_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(164, 118, eBlock, eWalkableAreas);
  cEgo.FaceDirection(eDirectionRight);
  theCharacter.LockView(COPILOTSEATED_1708);
  theCharacter.Animate(2, 9, eOnce, eBlock, eForwards);
  theCharacter.Say("this is a talking picture.");
  theCharacter.Animate(2, 9, eOnce, eBlock, eBackwards);
  theCharacter.Loop = 1;
  theCharacter.UnlockView();
}
*/

function btnNotebook_OnClick(GUIControl *control, MouseButton button)
{
  player.ChangeRoom(19);
  
}
function btnCompactTape_OnClick(GUIControl *control, MouseButton button)
{
  player.ActiveInventory = iCompact;
}

function btnLipstick_OnClick(GUIControl *control, MouseButton button)
{
  player.ActiveInventory = iLipstick;
}

function btnLens_OnClick(GUIControl *control, MouseButton button)
{
  player.ActiveInventory = iLens;
}

function gNotebook1_OnClick(GUI *theGui, MouseButton button)
{
  if (button == eMouseLeft)
  {
    if (mouse.Mode == eModeExit)
    {
      player.ChangeRoom(player.PreviousRoom);
      activeDialog = null;
      return;
    }
  }
}

function claraNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function stoneNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function veraNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function joannaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function salvatoreNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function queenieNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function maxNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function teresaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function lucindaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function samirNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function drkhanNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function carlosNotebook_OnClick(GUIControl *control, MouseButton button)
{
  handle_character_button(control);
}

function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info) 
{
  info.X = 0;
  info.Y = 0;
  info.Width = 1;
  info.Height = 1;
  info.HasAlphaChannel = true;
}

function dialog_options_render(DialogOptionsRenderingInfo *info)
{
  info.Surface.Clear();
  
  /*
  for (int i = 0; i < gNotebook1.ControlCount; i++)
  {
    Button* button = gNotebook1.Controls[i].AsButton;
    if (button != null)
    {
      // Get the position of the button
      int x = button.X;
      int y = button.Y;
      int width = button.Width;
      int height = button.Height;

      // Draw a transparent rectangle over the button
      info.Surface.DrawingColor = dlg_opt_color + i;
      info.Surface.DrawRectangle(x, y, x + width, y + height);
    }
  }
  */
}

function dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  if (activeDialog != null)
  {
    info.ActiveOptionID = activeDialogOptionId;
    info.RunActiveOption();
    activeDialog = null;
  }
  /*
  info.ActiveOptionID = 0;

  if (mouse.y < gNotebook1.Y || mouse.y >= gNotebook1.Y + gNotebook1.Height ||
      mouse.x < gNotebook1.X || mouse.x >= gNotebook1.X + gNotebook1.Width)
  {
    mouse.Mode = eModeExit;
    return;
  }

  for (int i = 0; i < gNotebook1.ControlCount; i++)
  {
    Button* button = gNotebook1.Controls[i].AsButton;
    if (button != null)
    {
      int x = button.X + gNotebook1.X;
      int y = button.Y + gNotebook1.Y;
      int width = button.Width;
      int height = button.Height;

      if (mouse.x >= x && mouse.x < x + width && mouse.y >= y && mouse.y < y + height)
      {
        if ((i + 1) <= info.DialogToRender.OptionCount)
        {
          info.ActiveOptionID = i + 1;
        }
        mouse.Mode = eModePointer;
        return;
      }
      else
      {
        mouse.Mode = eModeExit;
      }
    }
    else
    {
      mouse.Mode = eModeExit;
    }
  }
  */
}

function dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
  //Display(String.Format("active option: %d", info.ActiveOptionID));
  /*
  if (button == eMouseLeft)
  {
    shouldExitNotebook = true;
    activeDialogInfo = info;
    activeOptionId = info.ActiveOptionID;
    info.ActiveOptionID = 12;
    info.RunActiveOption();
  }
  */
}
