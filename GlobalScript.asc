
//=============================================================================
// INITIALIZATION
//=============================================================================

// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

function initialize_game_options()
{
  SetGameOption(OPT_PORTRAITPOSITION, 3);
  SetGameSpeed(80);
  
  Game.NormalFont = eFontSpeech;
}

// called when the game starts, before the first room is loaded
function game_start()
{
  initialize_control_panel();
  initialize_icon_bar();
  initialize_notebook();
  initialize_game_options();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;

  // Auto-save on the save slot 999
  SetRestartPoint();
}

//=============================================================================
// CONTROL PANEL
//=============================================================================

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  //btnIconSave_Click(btnIconSave, eMouseLeft);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("%s\nAGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  //btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (Speech.VoiceMode == eSpeechVoiceAndText)
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (Speech.VoiceMode == eSpeechVoiceOnly)
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (Speech.VoiceMode == eSpeechTextOnly)
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

//=============================================================================
// SAVE / LOAD DIALOGS
//=============================================================================

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int slots_used = 0;

  // record which slots are occupied already, 
  // if the types save name matches any existing one, then use that
  for (int i = 0; i < lstSaveGamesList.ItemCount; i++)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    slots_used++;
  }
  
  // current version of AGS has a limit of 50 save slots
  // that may be displayed in the ListBox at the same time
  if (slots_used >= 50)
  {
    return -1;
  }

  // find first free save slot, starting with slot 1 (for "cosmetic" purposes)
  for (int i = 1; i < 999; i++)
  {
    if (!slots[i])
    {
      return i;
    }
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Save slots limit of 50 is reached, delete some of the existing saves first!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

//=============================================================================
// RESTART DIALOG
//=============================================================================

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

//=============================================================================
// QUIT DIALOG
//=============================================================================

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

//=============================================================================
// PLAYER INPUT
//=============================================================================

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeftInv || button == eMouseRightInv || button == eMouseMiddleInv)
  {
    handle_inventory_click(button);
  }
  // game is paused, then don't process mouse clicks inside the room
  else if (!IsGamePaused())
  {
    handle_room_click(button);
  }
}

//=============================================================================
// GAME EVENTS
//=============================================================================

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  choose_cursor();
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  handle_overlays();
  handle_time();
}

function late_repeatedly_execute_always()
{
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      //player.Say("I see nothing special about it.");
      Display("You see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("This doesn't seem to have any purpose here.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      //player.Say("Looks alright.");
      Display("You see nothing special about it.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("This doesn't seem to have any purpose here.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("They barely acknowledge the item, clearly uninterested.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("This doesn't seem to have any purpose here.");
    }
  }
}

//=============================================================================
// Global interactions: Characters
//=============================================================================

// cEgo
function cEgo_Look(Character *theCharacter, CursorMode mode)
{
  cEgo_LookHandler(theCharacter, mode);
}

function cEgo_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo_TalkHandler(theCharacter, mode);
}

function cEgo_UseInv(Character *theCharacter, CursorMode mode)
{
  cEgo_UseInvHandler(theCharacter, mode);
}

// cStone
function cStone_Look(Character *thisCharacter, CursorMode mode)
{
  cStone_LookHandler(thisCharacter, mode);
}

function cStone_Talk(Character *thisCharacter, CursorMode mode)
{
  cStone_TalkHandler(thisCharacter, mode);
}

// cVera
function cVera_Look(Character *thisCharacter, CursorMode mode)
{
  cVera_LookHandler(thisCharacter, mode);
}

function cVera_Talk(Character *thisCharacter, CursorMode mode)
{
  cVera_TalkHandler(thisCharacter, mode);
}

// cJoanna
function cJoanna_Look(Character *theCharacter, CursorMode mode)
{
  cJoanna_LookHandler(theCharacter, mode);
}

function cJoanna_Talk(Character *theCharacter, CursorMode mode)
{
  cJoanna_TalkHandler(theCharacter, mode);
}

function cJoanna_UseInv(Character *theCharacter, CursorMode mode)
{
  cJoanna_UseInvHandler(theCharacter,  mode);
}

// cSalvatore
function cSalvatore_Look(Character *thisCharacter, CursorMode mode)
{
  cSalvatore_LookHandler(thisCharacter, mode);
}

function cSalvatore_Talk(Character *thisCharacter, CursorMode mode)
{
  cSalvatore_TalkHandler(thisCharacter, mode);
}

// cQueenie
function cQueenie_Look(Character *theCharacter, CursorMode mode)
{
  cQueenie_LookHandler(theCharacter, mode);
}

function cQueenie_Talk(Character *theCharacter, CursorMode mode)
{
  cQueenie_TalkHandler(theCharacter, mode);
}

function cQueenie_UseInv(Character *theCharacter, CursorMode mode)
{
  cQueenie_UseInvHandler(theCharacter,  mode);
}

// cMax
function cMax_Look(Character *thisCharacter, CursorMode mode)
{
  cMax_LookHandler(thisCharacter, mode);
}

function cMax_Talk(Character *thisCharacter, CursorMode mode)
{
  cMax_TalkHandler(thisCharacter, mode);
}

// cTeresa
function cTeresa_Look(Character *thisCharacter, CursorMode mode)
{
  cTeresa_LookHandler(thisCharacter, mode);
}

function cTeresa_Talk(Character *thisCharacter, CursorMode mode)
{
  cTeresa_TalkHandler(thisCharacter, mode);
}

// cLucinda
function cLucinda_Look(Character *thisCharacter, CursorMode mode)
{
  cLucinda_LookHandler(thisCharacter, mode);
}

function cLucinda_Talk(Character *thisCharacter, CursorMode mode)
{
  cLucinda_TalkHandler(thisCharacter, mode);
}

// cSamir
function cSamir_Look(Character *thisCharacter, CursorMode mode)
{
  cSamir_LookHandler(thisCharacter, mode);
}

function cSamir_Talk(Character *thisCharacter, CursorMode mode)
{
  cSamir_TalkHandler(thisCharacter, mode);
}

// cDrkhan
function cDrkhan_Look(Character *thisCharacter, CursorMode mode)
{
  cDrkhan_LookHandler(thisCharacter, mode);
}

function cDrkhan_Talk(Character *thisCharacter, CursorMode mode)
{
  cDrkhan_TalkHandler(thisCharacter, mode);
}

// cCarlos
function cCarlos_Look(Character *theCharacter, CursorMode mode)
{
  cCarlos_LookHandler(theCharacter, mode);
}

function cCarlos_Talk(Character *theCharacter, CursorMode mode)
{
  cCarlos_TalkHandler(theCharacter, mode);
}

function cCarlos_UseInv(Character *theCharacter, CursorMode mode)
{
  cCarlos_UseInvHandler(theCharacter,  mode);
}

// cFlAttend
function cFlAttend_Look(Character *theCharacter, CursorMode mode)
{
  cFlAttend_LookHandler(theCharacter, mode);
}

function cFlAttend_Talk(Character *theCharacter, CursorMode mode)
{
  cFlAttend_TalkHandler(theCharacter, mode);
}

function cFlAttend_UseInv(Character *theCharacter, CursorMode mode)
{
  cFlAttend_UseInvHandler(theCharacter, mode);
}

// cPilot
function cPilot_Look(Character *theCharacter, CursorMode mode)
{
  cPilot_LookHandler(theCharacter, mode);
}

function cPilot_Talk(Character *theCharacter, CursorMode mode)
{
  cPilot_TalkHandler(theCharacter, mode);
}

function cPilot_UseInv(Character *theCharacter, CursorMode mode)
{
  cPilot_UseInvHandler(theCharacter, mode);
}

// cCopilot
function cCopilot_Look(Character *theCharacter, CursorMode mode)
{
  cCopilot_LookHandler(theCharacter, mode);
}

function cCopilot_Talk(Character *theCharacter, CursorMode mode)
{
  cCopilot_TalkHandler(theCharacter, mode);
}

function cCopilot_UseInv(Character *theCharacter, CursorMode mode)
{
  cCopilot_UseInvHandler(theCharacter, mode);
}

//=============================================================================
// Global interactions: Inventory Items
//=============================================================================

// iCompact
function iCompact_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iCompact_LookHandler(theInventoryItem, mode);
}

function iCompact_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iCompact_UseInvHandler(theInventoryItem, mode);
}

// iCigar
function iCigar_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iCigar_LookHandler(theInventoryItem, mode);
}

function iCigar_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iCigar_UseInvHandler(theInventoryItem, mode);
}

// iClearTape
function iClearTape_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iClearTape_LookHandler(theInventoryItem, mode);
}

function iClearTape_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iClearTape_UseInvHandler(theInventoryItem, mode);
}

// iGreenThread
function iGreenThread_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iGreenThread_LookHandler(theInventoryItem, mode);
}

function iGreenThread_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iGreenThread_UseInvHandler(theInventoryItem, mode);
}

// iLens
function iLens_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iLens_LookHandler(theInventoryItem, mode);
}

function iLens_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iLens_UseInvHandler(theInventoryItem, mode);
}

// iLipstick
function iLipstick_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iLipstick_LookHandler(theInventoryItem, mode);
}

function iLipstick_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iLipstick_UseInvHandler(theInventoryItem, mode);
}

// iMagazine and iCrumpledMagazine
function iMagazine_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iMagazine_LookHandler(theInventoryItem, mode);
}

function iMagazine_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iMagazine_UseInvHandler(theInventoryItem, mode);
}

// iMatchbox
function iMatchbox_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iMatchbox_LookHandler(theInventoryItem, mode);
}

function iMatchbox_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iMatchbox_UseInvHandler(theInventoryItem, mode);
}

// iNotebook
function iNotebook_Look(InventoryItem *theInventoryItem, CursorMode mode)
{
  iNotebook_LookHandler(theInventoryItem, mode);
}

function iNotebook_UseInv(InventoryItem *theInventoryItem, CursorMode mode)
{
  iNotebook_UseInvHandler(theInventoryItem, mode);
}

/*
/*
function cCopilot_Look(Character *theCharacter, CursorMode mode)
{
  Display("The copilot");
}

function cPilot_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(157, 118, eBlock, eWalkableAreas);
  cEgo.FaceDirection(eDirectionLeft);
  theCharacter.LockView(PILOTSEATED_1705);
  theCharacter.Animate(2, 9, eOnce, eBlock, eForwards);
  theCharacter.Say("this is a talking picture.");
  theCharacter.Animate(2, 9, eOnce, eBlock, eBackwards);
  theCharacter.Loop = 1;
  theCharacter.UnlockView();
}

function cPilot_Look(Character *theCharacter, CursorMode mode)
{
  Display("The pilot");
}

function cCopilot_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(164, 118, eBlock, eWalkableAreas);
  cEgo.FaceDirection(eDirectionRight);
  theCharacter.LockView(COPILOTSEATED_1708);
  theCharacter.Animate(2, 9, eOnce, eBlock, eForwards);
  theCharacter.Say("this is a talking picture.");
  theCharacter.Animate(2, 9, eOnce, eBlock, eBackwards);
  theCharacter.Loop = 1;
  theCharacter.UnlockView();
}
*/

//=============================================================================
// Global interactions: Inventory Window
//=============================================================================

function btnInvWinClose_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinClose_OnClickHandler(control, button);  
}

function btnInvWinUp_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinUp_OnClickHandler(control, button);  
}

function btnInvWinDown_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinDown_OnClickHandler(control, button);  
}

function btnInvWinPointer_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinPointer_OnClickHandler(control, button);  
}

function btnInvWinCompactAndClearTape_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinCompactAndClearTape_OnClickHandler(control, button);  
}

function btnInvWinLens_OnClick(GUIControl *control, MouseButton button)
{
  btnInvWinLens_OnClickHandler(control, button);  
}

//=============================================================================
// Global interactions: Icon Bar
//=============================================================================

function btnNotebook_OnClick(GUIControl *control, MouseButton button)
{
  btnNotebook_OnClickHandler(control, button);  
}

function btnCompactClearTape_OnClick(GUIControl *control, MouseButton button)
{
  btnCompactClearTape_OnClickHandler(control, button);  
}

function btnLipstick_OnClick(GUIControl *control, MouseButton button)
{
  btnLipstick_OnClickHandler(control, button);  
}

function btnLens_OnClick(GUIControl *control, MouseButton button)
{
  btnLens_OnClickHandler(control, button);  
}

function btnMap_OnClick(GUIControl *control, MouseButton button)
{
  btnMap_OnClickHandler(control, button);  
}

function btnCurInv_OnClick(GUIControl *control, MouseButton button)
{
  btnCurInv_OnClickHandler(control, button);  
}

function btnPocket_OnClick(GUIControl *control, MouseButton button)
{
  btnPocket_OnClickHandler(control, button);
}

function btnSaveMain_OnClick(GUIControl *control, MouseButton button)
{
  btnSaveMain_OnClickHandler(control, button);  
}

function btnMenu_OnClick(GUIControl *control, MouseButton button)
{
  btnMenu_OnClickHandler(control, button);  
}

function btnQuitMain_OnClick(GUIControl *control, MouseButton button)
{
  btnQuitMain_OnClickHandler(control, button);  
}

//=============================================================================
// Global interactions: Notebook - Characters, Subjects, Evidence, Summary
//=============================================================================

// Characters
function gNotebookCharacters_OnClick(GUI *theGui, MouseButton button)
{
  gNotebookCharacters_OnClickHandler(theGui, button);
}

function claraNotebook_OnClick(GUIControl *control, MouseButton button)
{
  claraNotebook_OnClickHandler(control, button);
}
function stoneNotebook_OnClick(GUIControl *control, MouseButton button)
{
  stoneNotebook_OnClickHandler(control, button);
}

function veraNotebook_OnClick(GUIControl *control, MouseButton button)
{
  veraNotebook_OnClickHandler(control, button);
}

function joannaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  joannaNotebook_OnClickHandler(control, button);
}

function salvatoreNotebook_OnClick(GUIControl *control, MouseButton button)
{
  salvatoreNotebook_OnClickHandler(control, button);
}

function queenieNotebook_OnClick(GUIControl *control, MouseButton button)
{
  queenieNotebook_OnClickHandler(control, button);
}

function maxNotebook_OnClick(GUIControl *control, MouseButton button)
{
  maxNotebook_OnClickHandler(control, button);
}

function teresaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  teresaNotebook_OnClickHandler(control, button);
}

function lucindaNotebook_OnClick(GUIControl *control, MouseButton button)
{
  lucindaNotebook_OnClickHandler(control, button);
}

function samirNotebook_OnClick(GUIControl *control, MouseButton button)
{
  samirNotebook_OnClickHandler(control, button);
}

function drkhanNotebook_OnClick(GUIControl *control, MouseButton button)
{
  drkhanNotebook_OnClickHandler(control, button);
}

function carlosNotebook_OnClick(GUIControl *control, MouseButton button)
{
  carlosNotebook_OnClickHandler(control, button);
}

function btnCharactersToSubjects_OnClick(GUIControl *control, MouseButton button)
{
  btnCharactersToSubjects_OnClickHandler(control, button);
}

function btnCharactersToEvidence_OnClick(GUIControl *control, MouseButton button)
{
  btnCharactersToEvidence_OnClickHandler(control, button);
}

// Subjects
function gNotebookSubjects_OnClick(GUI *theGui, MouseButton button)
{
  gNotebookSubjects_OnClickHandler(theGui, button);
}

function btnSubjectsToCharacters_OnClick(GUIControl *control, MouseButton button)
{
  btnSubjectsToCharacters_OnClickHandler(control, button);
}

function btnSubjectsToEvidence_OnClick(GUIControl *control, MouseButton button)
{
  btnSubjectsToEvidence_OnClickHandler(control, button);
}


function stonecliffManorNotebook_OnClick(GUIControl *control, MouseButton button)
{
  stonecliffManorNotebook_OnClickHandler(control, button);
}

function madamWhiteSnakeNotebook_OnClick(GUIControl *control, MouseButton button)
{
  madamWhiteSnakeNotebook_OnClickHandler(control, button);
}

function theBanterNotebook_OnClick(GUIControl *control, MouseButton button)
{
  theBanterNotebook_OnClickHandler(control, button);
}

function mauledScientistNotebook_OnClick(GUIControl *control, MouseButton button)
{
  mauledScientistNotebook_OnClickHandler(control, button);
}

function tigersBloodNotebook_OnClick(GUIControl *control, MouseButton button)
{
  tigersBloodNotebook_OnClickHandler(control, button);
}

// Evidence
function gNotebookEvidence_OnClick(GUI *theGui, MouseButton button)
{
  gNotebookEvidence_OnClickHandler(theGui, button);
}

function btnEvidenceToCharacters_OnClick(GUIControl *control, MouseButton button)
{
  btnEvidenceToCharacters_OnClickHandler(control, button);
}

function btnEvidenceToSubjects_OnClick(GUIControl *control, MouseButton button)
{
  btnEvidenceToSubjects_OnClickHandler(control, button);
}

// Summary
function gNotebookSummary_OnClick(GUI *theGui, MouseButton button)
{
  gNotebookSummary_OnClickHandler(theGui, button);
}

//=============================================================================
// Global interactions: Magazine
//=============================================================================

function gMagazineCover_OnClick(GUI *theGui, MouseButton button)
{
  gMagazineCover_OnClickHandler(theGui, button);
}

function gMagazineCoverOpen_OnClick(GUIControl *control, MouseButton button)
{
  gMagazineCoverOpen_OnClickHandler(control, button);
}

function gMagazineCoverDescription_OnClick(GUIControl *control, MouseButton button)
{
  gMagazineCoverDescription_OnClickHandler(control, button);
}

function gMagazinePage1_OnClick(GUI *theGui, MouseButton button)
{
  gMagazinePage1_OnClickHandler(theGui, button);
}

function gMagazinePage1Left_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage1Left_OnClickHandler(control, button);
}

function gMagazinePage1Right_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage1Right_OnClickHandler(control, button);
}

function gMagazinePage1Description_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage1Description_OnClickHandler(control, button);
}

function gMagazinePage2_OnClick(GUI *theGui, MouseButton button)
{
  gMagazinePage2_OnClickHandler(theGui, button);
}

function gMagazinePage2Left_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage2Left_OnClickHandler(control, button);
}

function gMagazinePage2Description_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage2Description_OnClickHandler(control, button);
}

function gMagazinePage2Salvatore_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePage2Salvatore_OnClickHandler(control, button);
}

function gMagazinePageTorn_OnClick(GUI *theGui, MouseButton button)
{
  gMagazinePageTorn_OnClickHandler(theGui, button);
}

function gMagazinePageTornDescription_OnClick(GUIControl *control, MouseButton button)
{
  gMagazinePageTornDescription_OnClickHandler(control, button);
}

function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info) 
{
  info.X = 0;
  info.Y = 0;
  info.Width = 1;
  info.Height = 1;
  info.HasAlphaChannel = true;
}

function dialog_options_render(DialogOptionsRenderingInfo *info)
{
  info.Surface.Clear();
}

function dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  if (activeDialog != null)
  {
    info.ActiveOptionID = activeDialogOptionId;
    info.RunActiveOption();
    activeDialog = null;
  }
}

function dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{
}
function iCrumpledMagazine_OtherClick(InventoryItem *theItem, CursorMode mode)
{
  Display("here");
  ClaimEvent();
}
