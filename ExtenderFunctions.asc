bool IsOverWalkableArea(static Mouse)
{
  int walkableArea = GetWalkableAreaAtScreen(mouse.x, mouse.y);
  if (walkableArea > 0) 
  {
    return true;
  }
  
  return false;
}

bool IsOverHotspot(static Mouse)
{
  Hotspot* hoveredHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  int hsID = hoveredHotspot.ID;
  if (hsID > 0)
  {
    return true;
  }
  
  return false;
}

bool IsOverCharacter(static Mouse)
{
  Character* hoveredCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  if (hoveredCharacter != null)
  {
    return true;
  }
  
  return false;
}

bool IsOverObject(static Mouse)
{
  Object* hoveredObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  if (hoveredObject != null)
  {
    return true;
  }
  
  return false;
}

bool IsOverNothing(static Mouse)
{
  if (Mouse.IsOverWalkableArea() || Mouse.IsOverHotspot() ||
      Mouse.IsOverCharacter() || Mouse.IsOverObject())
  {
    return false;
  }
  
  return true;
}

bool IsUnderMouse(this Object*)
{
  Object* hoveredObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  
  if (this == hoveredObject)
  {
    return true;
  }
  
  return false;
}

Overlay* characterOverlays[];

function TalkerSay(this Character*, const string text)
{
  this.Say(text);
}

function TurnOnDetails(this Character*)
{
  this.SetProperty("showDetails", true);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *newOverlay = Overlay.CreateTextual(50, 50, 120, Game.SpeechFont, 15, 
    String.Format("%s x: %d, y: %d, view: %d, loop: %d, frame: %d",
      this.Name, this.x, this.y, this.View, this.Loop, this.Frame));
  characterOverlays[this.ID] = newOverlay;
}

function TurnOffDetails(this Character*)
{
  this.SetProperty("showDetails", false);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *currentOverlay = characterOverlays[this.ID];
  currentOverlay.Remove();
}

function ShowDetails(this Character*)
{
  bool showDetailsProperty = this.GetProperty("showDetails");
  if (!showDetailsProperty) return;
  
  /*
  if (characterOverlays == null)
  {
    characterOverlays = Dictionary.Create();
  }
  */
}

function handle_overlays()
{
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
  }
  
  int currentOverlayX = 25;
  int currentOverlayY = 25;
  for (int i = 0; i < Game.CharacterCount; i++) 
  {
    Character* currentCharacter = character[i];
    Overlay* overlay = characterOverlays[i];

    if (currentCharacter.GetProperty("showDetails")) 
    {
      if (overlay != null)
        overlay.Remove();
        
      characterOverlays[i] = Overlay.CreateTextual(
        currentOverlayX, currentOverlayY, 120, Game.SpeechFont, 15, 
        String.Format("%s x: %d, y: %d, view: %d, loop: %d, frame: %d", 
                      currentCharacter.Name, currentCharacter.x, currentCharacter.y,
                      currentCharacter.View, currentCharacter.Loop, currentCharacter.Frame));
                      
      currentOverlayY = (characterOverlays[i].Y + characterOverlays[i].Height);
    }
    else
    {
      if (overlay != null) 
      {
        overlay.Remove();
        characterOverlays[i] = null;
      }
    }
  }
}











