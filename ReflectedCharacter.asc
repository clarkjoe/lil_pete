ReflectedCharacter* Create(static ReflectedCharacter, Character* characterToReflect, int mirrorY)
{
  ReflectedCharacter* reflectedCharacter = new ReflectedCharacter();
  reflectedCharacter.characterIDToReflect = characterToReflect.ID;
  reflectedCharacter.mirrorY = mirrorY;
  return reflectedCharacter;
}

function ReflectedCharacter::Update(Object* reflectedCharacter)
{
  Character* characterToReflect = character[this.characterIDToReflect];
  ViewFrame *characterToReflectViewFrame = Game.GetViewFrame(characterToReflect.View, characterToReflect.Loop, characterToReflect.Frame);
  
  int loop = characterToReflectViewFrame.Loop;
  switch(loop)
  {
    case 0:
      loop = 3;
      break;
    case 3:
      loop = 0;
      break;
    case 4:
      loop = 5;
      break;
    case 5:
      loop = 4;
      break;
    case 6:
      loop = 7;
      break;
    case 7:
      loop = 6;
      break;
  }
  
  reflectedCharacter.SetView(characterToReflectViewFrame.View, loop, characterToReflectViewFrame.Frame);
  int differenceY = characterToReflect.y - this.mirrorY;
  reflectedCharacter.SetPosition(characterToReflect.x - 15, this.mirrorY - differenceY);
}

/*
void ReflectedCharacter::Remove()
{
  // Clean up reflection overlay and sprite
  if (_reflectionOverlay != null) {
    _reflectionOverlay.Remove();
    _reflectionOverlay = null;
  }
  if (_reflectionSprite != null) {
    _reflectionSprite.Delete();
    _reflectionSprite = null;
  }
}
*/