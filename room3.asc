Door bathroomDoor;
Door cockpitDoor;

#define SET_ACTIVE_CHARACTER_TIMER 1
#define CARLOS_ANIMATION_CYCLE_DELAY_TIMER 2
#define JOANNA_ANIMATION_CYCLE_DELAY_TIMER 3
#define QUEENIE_ANIMATION_CYCLE_DELAY_TIMER 4

Character* activeCharacter;
Character* previousActiveCharacter;

int carlosAnimationCycle = 0;
int joannaAnimationCycle = 0;
int queenieAnimationCycle = 0;

function setActiveCharacter()
{
  if (!IsTimerExpired(SET_ACTIVE_CHARACTER_TIMER))
  {
    activeCharacter = null;
    return;
  }
  
  switch (previousActiveCharacter)
  {
    case cQueenie:
      activeCharacter = cJoanna;
      break;
    case cJoanna:
      activeCharacter = cCarlos;
      break;
    case cCarlos:
      activeCharacter = cJoanna;
      break;
    default:
      activeCharacter = cJoanna;
      break;
  }
  
  previousActiveCharacter = activeCharacter;
}

/*
Carlos functions
*/
int moveCarlosToBackState = 0;
function moveCarlosToBack()
{
  switch (moveCarlosToBackState)
  {
    case 0:
    {
      cCarlos.LockViewOffset(CARLOSIDLESIT_1205, 1, 0);
      cCarlos.Animate(2, 9, eOnce, eNoBlock, eForwards);
      oGlass.Visible = true;
      
      moveCarlosToBackState++;
      
      break;
    }
    case 1:
    {
      if (!cCarlos.Animating)
      {
        cCarlos.UnlockView();
        cCarlos.FaceDirection(eDirectionLeft);
        cCarlos.Walk(105, 135, eNoBlock, eWalkableAreas);
        cCarlos.SetIdleView(-1, 0);
        moveCarlosToBackState++;
      }
      
      break;
    }
    case 2:
    {
      if (!cCarlos.Moving)
      {
        cCarlos.FaceDirection(eDirectionUp);
        moveCarlosToBackState = 0;
        carlosAnimationCycle++;
        setActiveCharacter();
        SetTimer(CARLOS_ANIMATION_CYCLE_DELAY_TIMER, 200);
        SetTimer(SET_ACTIVE_CHARACTER_TIMER, 800);
      }
      
      break;
    }
  }
}

int moveCarlosToTableState = 0;
function moveCarlosToTable()
{
  switch (moveCarlosToTableState)
  {
    case 0:
    {
      cCarlos.Walk(433, 134, eNoBlock, eWalkableAreas);
      moveCarlosToTableState++;
      
      break;
    }
    case 1:
    {
      if (!cCarlos.Moving)
      {
        cCarlos.LockViewOffset(CARLOSIDLESIT_1205, 1, 0);
        cCarlos.Animate(2, 9, eOnce, eNoBlock, eBackwards);
        moveCarlosToTableState++;
      }
      
      break;
    }
    case 2:
    {
      if (!cCarlos.Animating)
      {
        oGlass.Visible = false;
        cCarlos.UnlockView();
        cCarlos.SetIdleView(CARLOSIDLESIT_1205, 0);
        cCarlos.Loop = 0;
        carlosAnimationCycle = 0;
        moveCarlosToTableState = 0;
        setActiveCharacter();
        SetTimer(CARLOS_ANIMATION_CYCLE_DELAY_TIMER, 200);
        SetTimer(SET_ACTIVE_CHARACTER_TIMER, 800);
      }
      
      break;
    }
  }
}

int idleCarlosAtBackState = 101;
function idleCarlosAtBack()
{                                  

  switch (idleCarlosAtBackState)
  {
    default:
    {
      if (cCarlos.Frame != 0) return;
      
      if (IsTimerExpired(CARLOS_ANIMATION_CYCLE_DELAY_TIMER))
      {
        if (cCarlos == activeCharacter)
        {
          carlosAnimationCycle = 3;
        }
        else
        {
          SetTimer(CARLOS_ANIMATION_CYCLE_DELAY_TIMER, 100);
        }
      }
      
      break;
    }
  }
}

int idleCarlosAtTableState = 101;
function idleCarlosAtTable()
{                                  
  switch (idleCarlosAtTableState)
  {
    default:
    {
      if (cCarlos.Frame != 0) return;
      
      if (IsTimerExpired(CARLOS_ANIMATION_CYCLE_DELAY_TIMER))
      {
        if (cCarlos == activeCharacter)
        {
          carlosAnimationCycle = 1;
        }
        else
        {
          SetTimer(CARLOS_ANIMATION_CYCLE_DELAY_TIMER, 100);
        }
      }
      
      break;
    }
  }
}

Overlay *carlosInfoOverlay;
function handleCarlos()
{
  if (carlosInfoOverlay != null) {
    carlosInfoOverlay.Remove();
  }
  carlosInfoOverlay = Overlay.CreateTextual(200, 50, 120, Game.SpeechFont, 15, String.Format("Carlos view: %d, loop: %d, frame: %d, active: %d", cCarlos.View, cCarlos.Loop, cCarlos.Frame, activeCharacter == cCarlos));
  //carlosInfoOverlay = Overlay.CreateTextual(200, 50, 120, Game.SpeechFont, 15, String.Format("Carlos moveCarlosToBackState: %d, idleCarlosAtBackState: %d, moveCarlosToTableState: %d, idleCarlosAtTableState: %d", moveCarlosToBackState, idleCarlosAtBackState, moveCarlosToTableState, idleCarlosAtTableState));
  
  switch (carlosAnimationCycle)
  {
    case 0:
    {
      idleCarlosAtTable();
      break;
    }
    case 1:
    {
      moveCarlosToBack();
      break;
    }
    case 2:
    {
      idleCarlosAtBack();
      break;
    }
    case 3:
    {
      moveCarlosToTable();
      break;
    }
  }
}

/*
Joanna functions
*/
int moveJoannaToTableState = 0;
function moveJoannaToTable()
{
  switch (moveJoannaToTableState)
  {
    case 0:
    {
      cJoanna.ChangeView(JOANNANORMAL_1101);
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eForwards);
      
      moveJoannaToTableState++;
      
      break;
    }
    case 1:
    {
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        cJoanna.SetIdleView(JOANNAIDLE_1102, 5);
        cJoanna.Walk(380, 130, eNoBlock, eWalkableAreas);
        
        moveJoannaToTableState++;
      }
      
      break;
    }
    case 2:
    {
      if (!cJoanna.Moving)
      {
        cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
        cJoanna.Animate(5, 9, eOnce, eNoBlock, eBackwards);
        
        moveJoannaToTableState++;
      }
      
      break;
    }
    case 3:
    {
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        cJoanna.SetIdleView(JOANNASIT_1103, 0);
        cJoanna.Loop = 0;
        moveJoannaToTableState = 0;
        joannaAnimationCycle++;
        setActiveCharacter();
        SetTimer(SET_ACTIVE_CHARACTER_TIMER, 800);
        SetTimer(JOANNA_ANIMATION_CYCLE_DELAY_TIMER, 200);
      }
      
      break;
    }
  }
}

int moveJoannaToChairState = 0;
function moveJoannaToChair()
{
  switch (moveJoannaToChairState)
  {
    case 0:
    {
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eForwards);
      
      moveJoannaToChairState++;
      
      break;
    }
    case 1:
    {
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        cJoanna.SetIdleView(JOANNANORMAL_1101, 5);
        cJoanna.Walk(243, 132, eNoBlock, eWalkableAreas);
        moveJoannaToChairState++;
      }
      
      break;
    }
    case 2:
    {
      if (!cJoanna.Moving)
      {
        cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
        cJoanna.Animate(5, 9, eOnce, eNoBlock, eBackwards);
        
        moveJoannaToChairState++;
      }
      
      break;
    }
    case 3:
    {
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        cJoanna.SetIdleView(JOANNASIT_1103, 0);
        cJoanna.Loop = 0;
        moveJoannaToChairState = 0;
        joannaAnimationCycle = 0;
        setActiveCharacter();
        SetTimer(SET_ACTIVE_CHARACTER_TIMER, 800);
        SetTimer(JOANNA_ANIMATION_CYCLE_DELAY_TIMER, 200);
      }
      
      break;
    }
  }
}

int idleJoannaAtChairState = 101;
function idleJoannaAtChair()
{                                  
  switch (idleJoannaAtChairState)
  {
    case 0:
    { 
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        
        if (cJoanna.Loop == 2)
        {
          idleJoannaAtChairState = 101;
        }
        else
        {
          idleJoannaAtChairState = (cJoanna.Loop + 101);
        }
        
        SetTimer(JOANNA_ANIMATION_CYCLE_DELAY_TIMER, 200);
        cJoanna.Loop = 0;
      }
      
      break;
    }
    case 1:
    {
      cJoanna.LockView(JOANNASIT_1103);
      cJoanna.Animate(1, 9, eOnce, eNoBlock, eForwards);
      
      idleJoannaAtChairState = 0;
      break;
    }
    case 2:
    {
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, -1);
      cJoanna.Animate(2, 9, eOnce, eNoBlock, eForwards);
      
      idleJoannaAtChairState = 0;
      break;
    }
    default:
    {
      if (IsTimerExpired(JOANNA_ANIMATION_CYCLE_DELAY_TIMER))
      {
        if (cJoanna == activeCharacter)
        {
          joannaAnimationCycle++;
          idleJoannaAtChairState = 101;
          break;
        }
        
        idleJoannaAtChairState -= 100;
      }
      
      break;
    }
  }
}

int idleJoannaAtTableState = 101;
function idleJoannaAtTable()
{                                  
  switch (idleJoannaAtTableState)
  {
    case 0:
    { 
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        
        if (cJoanna.Loop == 2)
        {
          idleJoannaAtTableState = 101;
        }
        else
        {
          idleJoannaAtTableState = (cJoanna.Loop + 101);
        }
        
        SetTimer(JOANNA_ANIMATION_CYCLE_DELAY_TIMER, 200);
        cJoanna.Loop = 0;
      }
      
      break;
    }
    case 1:
    {
      cJoanna.LockView(JOANNASIT_1103);
      cJoanna.Animate(1, 9, eOnce, eNoBlock, eForwards);
      
      idleJoannaAtTableState = 0;
      break;
    }
    case 2:
    {
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, -1);
      cJoanna.Animate(2, 9, eOnce, eNoBlock, eForwards);
      
      idleJoannaAtTableState = 0;
      break;
    }
    default:
    {
      if (IsTimerExpired(JOANNA_ANIMATION_CYCLE_DELAY_TIMER))
      {
        if (cJoanna == activeCharacter)
        {
          joannaAnimationCycle++;
          idleJoannaAtTableState = 101;
          break;
        }
        
        idleJoannaAtTableState -= 100;
      }
      
      break;
    }
  }
}

Overlay *joannaInfoOverlay;
function handleJoanna()
{
  if (joannaInfoOverlay != null) {
    joannaInfoOverlay.Remove();
  }
  joannaInfoOverlay = Overlay.CreateTextual(50, 50, 120, Game.SpeechFont, 15, String.Format("Joanna view: %d, loop: %d, frame: %d, active: %d", cJoanna.View, cJoanna.Loop, cJoanna.Frame, activeCharacter == cJoanna));
  
  switch (joannaAnimationCycle)
  {
    case 0:
    {
      idleJoannaAtChair();
      break;
    }
    case 1:
    {
      moveJoannaToTable();
      break;
    }
    case 2:
    {
      idleJoannaAtTable();
      break;
    }
    case 3:
    {
      moveJoannaToChair();
      break;
    }
  }
}

/*
Queenie functions
*/
int idleQueenieAtChairState = 101;
function idleQueenieAtChair()
{                                  
  switch (idleQueenieAtChairState)
  {
    default:
    {
      if (IsTimerExpired(QUEENIE_ANIMATION_CYCLE_DELAY_TIMER))
      {
        if (cQueenie == activeCharacter)
        {
          setActiveCharacter();
          //removeActiveCharacter();
          SetTimer(SET_ACTIVE_CHARACTER_TIMER, 500);
        }
        
        SetTimer(QUEENIE_ANIMATION_CYCLE_DELAY_TIMER, 200);
      }
      
      break;
    }
  }
}

Overlay *queenieInfoOverlay;
function handleQueenie()
{
  if (queenieInfoOverlay != null) {
    queenieInfoOverlay.Remove();
  }
  //queenieInfoOverlay = Overlay.CreateTextual(200, 150, 120, Game.SpeechFont, 15, String.Format("Queenie view: %d, loop: %d, active: %d", cQueenie.View, cQueenie.Loop, activeCharacter == cQueenie));
  
  switch (queenieAnimationCycle)
  {
    case 0:
    {
      idleQueenieAtChair();
      break;
    }
  }
}

int objectSpeed = -1;
int cycleCounter = 0;

function handleClouds()
{
  cycleCounter++; // Increment the counter on each game cycle

  if (cycleCounter % 25 == 0) // Check if the counter is a multiple of 10
  {
    // Move object to the right if it hasn't reached the edge of the screen
    if (oCloudsA.X > -332)  // Replace 320 with the screen boundary you want
    {
        oCloudsA.X += objectSpeed; // Moves the object to the right
    }
    else
    {
        oCloudsA.X = 89; // Resets the object to the starting point if it reaches the edge
    }  
    
    if (oCloudsA.X > -332)  // Replace 320 with the screen boundary you want
    {
      oCloudsB.X += objectSpeed; // Moves the object to the right
    }
    else
    {
      oCloudsB.X = 509; // Resets the object to the starting point if it reaches the edge
    }  
  }
}

function on_mouse_click(MouseButton button)
{
  if (oInsideWastebasket.Visible)
  {    
    if (oInsideWastebasket.IsUnderMouse())
    {
      Room.ProcessClick(mouse.x, mouse.y, mouse.Mode);
    }
    
    ClaimEvent();
    return;
  }
  if (!IsGamePaused())
  {
    if ((button == eMouseRight) && (Mouse.IsOverWalkableArea() || Mouse.IsOverNothing()) && !(Mouse.IsOverHotspot()))
    {
      mouse.Mode = eModeLookat;
      Display("There is a wastebasket in the left corner of the room. Other hints.");
      choose_cursor();
      ClaimEvent();
    }
  }
}
function room_LeaveRight()
{
  cEgo.ChangeRoom(5);
}

function room_LeaveLeft()
{
  cEgo.ChangeRoom(6);
}

function loadClara()
{
  switch(player.PreviousRoom)
  {
    case 5:
      cEgo.x = cockpitDoor.doorObject.X + 60;
      cEgo.y = cockpitDoor.doorObject.Y;
      break;
    case 6:
      cEgo.x = bathroomDoor.doorObject.X - 20;
      cEgo.y = bathroomDoor.doorObject.Y;
      break;
    default:
      break;
  }
}

function loadJoanna()
{
  cJoanna.ChangeView(JOANNANORMAL_1101);
  cJoanna.SetIdleView(JOANNASIT_1103, 0);
  cJoanna.Loop = 0;
  cJoanna.ChangeRoom(player.Room, 243, 132);
  
  joannaAnimationCycle = 0;
  
  idleJoannaAtChairState = 101;
  moveJoannaToChairState = 0;
  
  idleJoannaAtTableState = 101;
  moveJoannaToTableState = 0;
  
  SetTimer(JOANNA_ANIMATION_CYCLE_DELAY_TIMER, 200);
}

function loadCarlos()
{
  oGlass.Visible = false;
  oGlass.Baseline = 128;
  oGlass.X = 417;
  oGlass.Y = 110;
  
  cCarlos.ChangeView(CARLOSNORMAL_1201);
  cCarlos.SetIdleView(CARLOSIDLESIT_1205, 0);
  cCarlos.Loop = 0;
  cCarlos.ChangeRoom(player.Room, 433, 134);
  
  carlosAnimationCycle = 0;
  
  idleCarlosAtTableState = 101;
  moveCarlosToTableState = 0;
  
  idleCarlosAtBackState = 101;
  moveCarlosToBackState = 0;
  
  SetTimer(CARLOS_ANIMATION_CYCLE_DELAY_TIMER, 200);
}

function loadQueenie()
{
  cQueenie.ChangeView(4);
  cQueenie.SetIdleView(40, 0);
  cQueenie.Loop = 0;
  cQueenie.ChangeRoom(player.Room, 346, 156);
  
  SetTimer(QUEENIE_ANIMATION_CYCLE_DELAY_TIMER, 200);
}

function loadFlightAttendant()
{
  cFlAttend.x = hCabinet.WalkToX;
  cFlAttend.y = hCabinet.WalkToY;
  cFlAttend.FaceDirection(eDirectionLeft);
}

function initDoors()
{
  oBathroomDoor.SetView(AIRPLANEDOORS_5003);
  oCockpitDoor.SetView(AIRPLANEDOORS_5003);
  oCockpitDoor.Graphic = 1069;
  bathroomDoor.Init(oBathroomDoor, 35, 0, -20, -2);
  cockpitDoor.Init(oCockpitDoor, -25, 0, 30, -2);
}

function initTimers()
{
  SetTimer(SET_ACTIVE_CHARACTER_TIMER, 10);
  activeCharacter = null;
}

function room_Load()
{
  aAirplane_hum.Play(eAudioPriorityNormal, eRepeat);
  a6001_AirplaneMusic.Play(eAudioPriorityNormal, eRepeat);
  
  initDoors();
  initTimers();
  
  loadClara();
  loadJoanna();
  loadQueenie();
  loadCarlos();
  //loadFlightAttendant();
}

function room_AfterFadeIn()
{
  switch(player.PreviousRoom)
  {
    case 5:
      cockpitDoor.doorObject.SetView(AIRPLANEDOORS_5003);
      cockpitDoor.doorObject.Animate(1, 9, eOnce, eBlock, eForwards);
      cEgo.Walk(cEgo.x - 80, cEgo.y + 5, eBlock, eAnywhere);
      cockpitDoor.doorObject.Animate(1, 9, eOnce, eBlock, eBackwards);
      break;
    case 6:
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eBlock, eForwards);
      cEgo.Walk(cEgo.x + 65, cEgo.y + 5, eBlock, eAnywhere);
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eBlock, eBackwards);
      break;
    default:
      break;
  }
}

function hWasteBasket_Look(Hotspot *theHotspot, CursorMode mode)
{
  if (cEgo.HasInventory(iMagazine))
    Display("Tbere is nothing more to get here");
  else
    Display("You see something inside the wastebasket.");
}

function hWasteBasket_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.FaceDirection(eDirectionLeft);
  cEgo.LockViewAligned(CLARAMAINCABIN_1009, 0, eAlignRight);
  cEgo.Animate(0, 9, eOnce, eBlock);
  
  if (cEgo.HasInventory(iMagazine))
    oInsideWastebasket.Graphic = AIRPLANE_TRASH_EMPTY;
  else
    oInsideWastebasket.Graphic = AIRPLANE_TRASH_FULL;
  
  oInsideWastebasket.Baseline = 200;
  oInsideWastebasket.Visible = true;
}

function oInsideWastebasket_Interact(Object *theObject, CursorMode mode)
{
  if (cEgo.HasInventory(iMagazine))
  {
    Display("Tbere is nothing more to get here");

    cEgo.Animate(0, 9, eOnce, eBlock, eBackwards);
    cEgo.UnlockView();
    cEgo.FaceDirection(eDirectionLeft);
    oInsideWastebasket.Visible = false;
    
    return;
  }

  cEgo.Animate(1, 9, eOnce, eBlock);
  Display("You pick it up and place it in your purse.");
  cEgo.AddInventory(iMagazine);
  oInsideWastebasket.Graphic = AIRPLANE_TRASH_EMPTY;
  cEgo.Animate(1, 9, eOnce, eBlock, eBackwards);
}

function oSeatPocket_Interact(Object *theObject, CursorMode mode)
{
  Display("There is nothing more to get here.");

  cEgo.Animate(3, 9, eOnce, eBlock, eForwards);
  oSeatPocket.Visible = false;
  cEgo.UnlockView();
  cEgo.FaceDirection(eDirectionRight);
}

function sitDown(Character *chara, Hotspot *hChair, int sitView, int sitLoop)
{
  chara.SetProperty("chairNumber", hChair1.ID);
  chara.SetProperty("isSitting", true);
  int currCharacterX = chara.x;
  
  chara.LockView(sitView);
  
  chara.x = (chara.x - 12);
  chara.Animate(sitLoop, 5, eOnce, eBlock, eBackwards);
}

function standUp(Character *chara, int standView, int standLoop)
{
  chara.SetProperty("isSitting", false);
  int currCharacterX = chara.x;
  
  chara.Animate(standLoop, 5, eOnce, eBlock, eForwards);
  cEgo.UnlockView(eStopMoving);
  cEgo.FaceDirection(eDirectionRight);
  chara.x = (currCharacterX + 12);
}

function hChair_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("You see a chair.");
}

function oInsideWastebasket_Look(Object *theObject, CursorMode mode)
{
  Display("You see the inside of the waste basket.");
}

function oDoor_interact(Object *theDoor, int loop, int walkToOffsetX,  int walkToOffsetY,  int walkOffOffsetX,  int walkOffOffsetY)
{
  int relativeX = theDoor.X + walkToOffsetX;
  int relativeY = theDoor.Y + walkToOffsetY;
  
  cEgo.Walk(relativeX, relativeY, eBlock);
  
  theDoor.SetView(AIRPLANEDOORS_5003);
  theDoor.Animate(loop, 9, eOnce, eBlock, eForwards);
  
  cEgo.Walk(relativeX + walkOffOffsetX, relativeY + walkOffOffsetY, eBlock, eAnywhere);
}

function oCockpitDoor_Interact(Object *cockPitDoor, CursorMode mode)
{
  oDoor_interact(cockPitDoor, 1, -5, 0, 100, -3);
}

function oBathroomDoor_Interact(Object *bathDoor, CursorMode mode)
{ 
  oDoor_interact(bathDoor, 0, 25, 0, -85, -3);
}

bool test = true;
Overlay *gameInfoOverlay;
function repeatedly_execute()
{
  if (test)
  {
    test = false;
    SetGameSpeed(80);
  }
  if (gameInfoOverlay != null)
    gameInfoOverlay.Remove();
    
  gameInfoOverlay = Overlay.CreateTextual(50, 150, 120, Game.SpeechFont, 15, String.Format("speed: %d", GetGameSpeed()));
  
  
  if (oInsideWastebasket.Visible)
  {
    mouse.Mode = eModeEmpty;
    
    if (oInsideWastebasket.IsUnderMouse())
      mouse.Mode = eModeInteract;
  }
  
  if (oSeatPocket.Visible)
  {
    mouse.Mode = eModeEmpty;
    
    if (oSeatPocket.IsUnderMouse())
      mouse.Mode = eModeInteract;
  }
  
  if (oInsideCabinet.Visible)
  {
    mouse.Mode = eModeEmpty;
    
    if (oInsideCabinet.IsUnderMouse())
      mouse.Mode = eModeInteract;
  }
  
  if (activeCharacter == null)
  {
    setActiveCharacter();
  }
  
  handleCarlos();
  handleJoanna();
  handleQueenie();
  
  handleClouds();
}

function sitClaraInChair()
{
  cEgo.LockViewAligned(CLARASIT_1003, 3, eAlignRight);
  cEgo.Animate(3, 9, eOnce, eBlock, eBackwards);
  oSeatPocket.X = cEgo.x + 30;
  oSeatPocket.Y = cEgo.y - 20;
  oSeatPocket.Baseline = 200;
  oSeatPocket.Visible = true;
}

function hChair1_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair1.WalkToX, hChair1.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hChair2_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair2.WalkToX, hChair2.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hChair3_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair3.WalkToX, hChair3.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hChair4_Interact(Hotspot *theHotspot, CursorMode mode)
{
  Display("You cannot sit in Joanna's chair");
}

function hChair5_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair5.WalkToX, hChair5.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hChair6_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair6.WalkToX, hChair6.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hChair7_Interact(Hotspot *theHotspot, CursorMode mode)
{
  Display("You cannot sit in Queenie's chair");
}

function hChair8_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.Walk(hChair8.WalkToX, hChair8.WalkToY, eBlock, eWalkableAreas);
  sitClaraInChair();
}

function hCabinet_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.FaceDirection(eDirectionRight);
  cEgo.LockViewAligned(CLARAMAINCABIN_1009, 2, eAlignLeft);
  cEgo.Animate(2, 9, eOnce, eBlock);
  
  if (cEgo.HasInventory(iCigar))
    oInsideCabinet.Graphic = AIRPLANE_CABINET_EMPTY;
  else
    oInsideCabinet.Graphic = AIRPLANE_CABINET_FULL;
  
  oInsideCabinet.Baseline = 200;
  oInsideCabinet.X = 304;
  oInsideCabinet.Y = 138;
  oInsideCabinet.Visible = true;
}

function hCabinet_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("This is a cabinet.");
}

function oInsideCabinet_Interact(Object *theObject, CursorMode mode)
{
  if (cEgo.HasInventory(iCigar))
  {
    Display("Tbere is nothing more to get here");

    cEgo.Animate(2, 9, eOnce, eBlock, eBackwards);
    cEgo.UnlockView();
    cEgo.FaceDirection(eDirectionRight);
    oInsideCabinet.Visible = false;
    
    return;
  }

  Display("You pick it up and place it in your purse.");
  cEgo.AddInventory(iCigar);
  oInsideCabinet.Graphic = AIRPLANE_CABINET_EMPTY;
}

function oInsideCabinet_Look(Object *theObject, CursorMode mode)
{
  Display("Hmmmm.... fresh.");
}
