Door bathroomDoor;
Door cockpitDoor;

#define SET_ACTIVE_CHARACTER_TIMER 13

Character* activeCharacter;
Character* previousActiveCharacter;

int carlosAnimationCycle = 0;
int joannaAnimationCycle = 0;
int queenieAnimationCycle = 0;

function setActiveCharacter()
{
  if (!IsTimerExpired(SET_ACTIVE_CHARACTER_TIMER))
  {
    //activeCharacter = null;
    return;
  }
  
  switch (previousActiveCharacter)
  {
    case cQueenie:
      activeCharacter = cQueenie;
      break;
    case cJoanna:
      activeCharacter = cCarlos;
      break;
    case cCarlos:
      activeCharacter = cJoanna;
      break;
    default:
      activeCharacter = cQueenie;
      break;
  }
  
  previousActiveCharacter = activeCharacter;
}

function oDoor_interact(Object *theDoor, int loop, int walkToOffsetX,  int walkToOffsetY,  int walkOffOffsetX,  int walkOffOffsetY, Character* chara)
{
  int relativeX = theDoor.X + walkToOffsetX;
  int relativeY = theDoor.Y + walkToOffsetY;
  
  chara.Walk(relativeX, relativeY, eBlock);
  
  theDoor.SetView(AIRPLANEDOORS_5003);
  theDoor.Animate(loop, 9, eOnce, eBlock, eForwards);
  
  chara.Walk(relativeX + walkOffOffsetX, relativeY + walkOffOffsetY, eBlock, eAnywhere);
}

/*
Carlos functions
*/
int moveCarlosToBackState = 0;
function moveCarlosToBack()
{
  switch (moveCarlosToBackState)
  {
    case 0:
    {
      cCarlos.LockViewOffset(CARLOSIDLESIT_1205, 1, 0);
      cCarlos.Animate(2, 9, eOnce, eNoBlock, eForwards);
      oGlass.Visible = true;
      
      moveCarlosToBackState++;
      
      break;
    }
    case 1:
    {
      if (cCarlos.Animating) break;
      
      cCarlos.UnlockView();
      cCarlos.FaceDirection(eDirectionLeft);
      cCarlos.MyWalk(105, 135, eNoBlock, eWalkableAreas);
      cCarlos.SetIdleView(-1, 0);
      
      moveCarlosToBackState++;
      
      break;
    }
    case 2:
    {
      if (cCarlos.Moving) break;
      
      if (!cCarlos.HasReachedDestination())
      {
        Point* destination = cCarlos.GetDestination();
        cCarlos.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveCarlosToBackState++;
      
      break;
    }
    case 3:
    {
      cCarlos.FaceDirection(eDirectionUp);
      moveCarlosToBackState = 0;
      carlosAnimationCycle++;
      setActiveCharacter();
      StartTimerBySeconds(cCarlos.ID, 2.0);
      StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      
      break;
    }
  }
}

int moveCarlosToTableState = 0;
function moveCarlosToTable()
{
  switch (moveCarlosToTableState)
  {
    case 0:
    {
      cCarlos.MyWalk(433, 134, eNoBlock, eWalkableAreas);
      cJoanna.SetIdleView(-1, 0);
      
      moveCarlosToTableState++;
      
      break;
    }
    case 1:
    {
      if (cCarlos.Moving) break;
      
      if (!cCarlos.HasReachedDestination())
      {
        Point* destination = cCarlos.GetDestination();
        cCarlos.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveCarlosToTableState++;
      
      break;
    }
    case 2:
    {
      cCarlos.LockViewOffset(CARLOSIDLESIT_1205, 1, 0);
      cCarlos.Animate(2, 9, eOnce, eNoBlock, eBackwards);
      
      moveCarlosToTableState++;
      
      break;
    }
    case 3:
    {
      if (cCarlos.Animating) break;
      
      oGlass.Visible = false;
      cCarlos.UnlockView();
      cCarlos.SetIdleView(CARLOSIDLESIT_1205, 0);
      cCarlos.Loop = 0;
      carlosAnimationCycle = 0;
      moveCarlosToTableState = 0;
      setActiveCharacter();
      StartTimerBySeconds(cCarlos.ID, 2.0);
      StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      
      break;
    }
  }
}

int idleCarlosAtBackState;
function idleCarlosAtBack()
{
  switch (idleCarlosAtBackState)
  {
    default:
    {
      if (cCarlos.Frame != 0) break;
      
      if (IsTimerExpired(cCarlos.ID))
      {
        if (cCarlos == activeCharacter)
        {
          carlosAnimationCycle = 3;
        }
        else
        {
          StartTimerBySeconds(cCarlos.ID, 2.0);
        }
      }
      
      break;
    }
  }
}

int idleCarlosAtTableState;
function idleCarlosAtTable()
{                                  
  switch (idleCarlosAtTableState)
  {
    default:
    {
      if (cCarlos.Frame != 0) break;
      
      if (IsTimerExpired(cCarlos.ID))
      {
        if (cCarlos == activeCharacter)
        {
          carlosAnimationCycle = 1;
        }
        else
        {
          StartTimerBySeconds(cCarlos.ID, 2.0);
        }
      }
      
      break;
    }
  }
}

function handleCarlos()
{
  switch (carlosAnimationCycle)
  {
    case 0:
    {
      idleCarlosAtTable();
      break;
    }
    case 1:
    {
      moveCarlosToBack();
      break;
    }
    case 2:
    {
      idleCarlosAtBack();
      break;
    }
    case 3:
    {
      moveCarlosToTable();
      break;
    }
  }
}

/*
Joanna functions
*/
int moveJoannaToTableState = 0;
function moveJoannaToTable()
{
  switch (moveJoannaToTableState)
  {
    case 0:
    {
      cJoanna.ChangeView(JOANNANORMAL_1101);
      cJoanna.SetIdleView(-1, 0);
      cJoanna.LockViewOffset(JOANNASIT_1103, 2, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eForwards);
      
      moveJoannaToTableState++;
      
      break;
    }
    case 1:
    {
      if (cJoanna.Animating) break;
      
      cJoanna.UnlockView();
      cJoanna.x += 10;
      cJoanna.y += 5;
      cJoanna.MyWalk(cJoanna.x, cJoanna.y + 7, eNoBlock, eAnywhere);
      
      moveJoannaToTableState++;
      
      break;
    }
    case 2:
    {
      if (cJoanna.Moving) break;
      
      if (!cJoanna.HasReachedDestination())
      {
        Point* destination = cJoanna.GetDestination();
        cJoanna.MyWalk(destination.x, destination.y, eNoBlock, eAnywhere);
        break;
      }
        
      moveJoannaToTableState++;
      
      break;
    }
    case 3:
    {
      cJoanna.MyWalk(383, 133, eNoBlock, eWalkableAreas);
      
      moveJoannaToTableState++;
      
      break;
    }
    case 4:
    {
      if (cJoanna.Moving) break;
      
      if (!cJoanna.HasReachedDestination())
      {
        Point* destination = cJoanna.GetDestination();
        cJoanna.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveJoannaToTableState++;
      
      break;
    }
    case 5:
    {
      cJoanna.LockViewOffset(JOANNASIT_1103, 2, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eBackwards);
      
      moveJoannaToTableState++;
      
      break;
    }
    case 6:
    {
      if (cJoanna.Animating) break;

      cJoanna.UnlockView();
      cJoanna.SetIdleView(JOANNASIT_1103, 0);
      cJoanna.Loop = 0;
      joannaAnimationCycle++;
      setActiveCharacter();
      StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      StartTimerBySeconds(cJoanna.ID, 2.0);
      
      moveJoannaToTableState = 0;
      break;
    }
  }
}

int moveJoannaToChairState = 0;
function moveJoannaToChair()
{
  switch (moveJoannaToChairState)
  {
    case 0:
    {
      cJoanna.LockViewOffset(JOANNASIT_1103, 2, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eForwards);
      
      moveJoannaToChairState++;
      break;
    }
    case 1:
    {
      if (cJoanna.Animating) break;
      
      cJoanna.UnlockView();
      cJoanna.SetIdleView(-1, 0);
      cJoanna.MyWalk(234, 146, eNoBlock, eWalkableAreas);
      
      moveJoannaToChairState++;
      break;
    }
    case 2:
    {
      if (cJoanna.Moving) break;
      
      if (!cJoanna.HasReachedDestination())
      {
        Point* destination = cJoanna.GetDestination();
        cJoanna.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveJoannaToChairState++;
      
      break;
    }
    case 3:
    {
      cJoanna.MyWalk(234, 146 - 12, eNoBlock, eAnywhere);
      
      moveJoannaToChairState++;
      
      break;
    }
    case 4:
    {
      if (cJoanna.Moving) break;
      
      if (!cJoanna.HasReachedDestination())
      {
        Point* destination = cJoanna.GetDestination();
        cJoanna.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveJoannaToChairState++;
      
      break;
    }
    case 5:
    {
      cJoanna.x -= 10;
      cJoanna.LockViewOffset(JOANNASIT_1103, 2, 0);
      cJoanna.Animate(5, 9, eOnce, eNoBlock, eBackwards);
      
      moveJoannaToChairState++;
      break;
    }
    case 6:
    {
      if (cJoanna.Animating) break;
      
      cJoanna.UnlockView();
      cJoanna.SetIdleView(JOANNASIT_1103, 0);
      cJoanna.Loop = 0;
      joannaAnimationCycle = 0;
      setActiveCharacter();
      StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      StartTimerBySeconds(cJoanna.ID, 2.0);
      
      moveJoannaToChairState = 0;
      break;
    }
  }
}

int idleJoannaAtChairState;
int previousIdleJoannaAtChairState;
function idleJoannaAtChair()
{
  switch (idleJoannaAtChairState)
  {
    case 0:
    {
      if (cJoanna.Animating) break;
      
      cJoanna.UnlockView();
      idleJoannaAtChairState = (previousIdleJoannaAtChairState % 2) + 1 + 100;
      StartTimerBySeconds(cJoanna.ID, 2.0);
      cJoanna.Loop = 0;
      
      break;
    }
    case 1:
    {
      if (cJoanna.Frame != 0) break;
      
      cJoanna.LockView(JOANNASIT_1103);
      cJoanna.Animate(1, 9, eOnce, eNoBlock, eForwards);
      
      previousIdleJoannaAtChairState = idleJoannaAtChairState;
      idleJoannaAtChairState = 0;
      
      break;
    }
    case 2:
    {
      if (cJoanna.Frame != 0) break;
      
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
      cJoanna.Animate(2, 9, eOnce, eNoBlock, eForwards);
      
      previousIdleJoannaAtChairState = idleJoannaAtChairState;
      idleJoannaAtChairState = 0;
      
      break;
    }
    default:
    {
      if (IsTimerExpired(cJoanna.ID))
      {
        if (cJoanna == activeCharacter)
        {
          joannaAnimationCycle++;
          idleJoannaAtChairState = 101;
          previousIdleJoannaAtChairState = 101;
          break;
        }
        idleJoannaAtChairState -= 100;
      }
      break;
    }
  }
}

int idleJoannaAtTableState;
int previousIdleJoannaAtTableState;
function idleJoannaAtTable()
{
  switch (idleJoannaAtTableState)
  {
    case 0:
    {
      if (!cJoanna.Animating)
      {
        cJoanna.UnlockView();
        idleJoannaAtTableState = (previousIdleJoannaAtTableState % 2) + 1 + 100;
        StartTimerBySeconds(cJoanna.ID, 2.0);
        cJoanna.Loop = 0;
      }
      break;
    }
    case 1:
    {
      if (cJoanna.Frame != 0) break;
      cJoanna.LockView(JOANNASIT_1103);
      cJoanna.Animate(1, 9, eOnce, eNoBlock, eForwards);
      previousIdleJoannaAtTableState = idleJoannaAtTableState;
      idleJoannaAtTableState = 0;
      break;
    }
    case 2:
    {
      if (cJoanna.Frame != 0) break;
      cJoanna.LockViewOffset(JOANNASIT_1103, -1, 0);
      cJoanna.Animate(2, 9, eOnce, eNoBlock, eForwards);
      previousIdleJoannaAtTableState = idleJoannaAtTableState;
      idleJoannaAtTableState = 0;
      break;
    }
    default:
    {
      if (IsTimerExpired(cJoanna.ID))
      {
        if (cJoanna == activeCharacter)
        {
          joannaAnimationCycle++;
          idleJoannaAtTableState = 101;
          previousIdleJoannaAtTableState = 101;
          break;
        }
        idleJoannaAtTableState -= 100;
      }
      break;
    }
  }
}

function handleJoanna()
{
  switch (joannaAnimationCycle)
  {
    case 0:
    {
      idleJoannaAtChair();
      break;
    }
    case 1:
    {
      moveJoannaToTable();
      break;
    }
    case 2:
    {
      idleJoannaAtTable();
      break;
    }
    case 3:
    {
      moveJoannaToChair();
      break;
    }
  }
}

/*
Queenie functions
*/
int moveQueenieToBathroomState = 0;
function moveQueenieToBathroom()
{
  switch (moveQueenieToBathroomState)
  {
    case 0:
    {
      if (cQueenie.Frame != 0 && oQueenieSmoke.Frame != 13) break;
      
      oQueenieSmoke.Animate(0, 9, eOnce, eNoBlock, eForwards);
      
      moveQueenieToBathroomState++;
      break;
    }
    case 1:
    {
      if (oQueenieSmoke.Animating) break;
      
      oQueenieSmoke.Visible = false;
      cQueenie.LockViewAligned(QUEENIEIDLESIT_1153, 2, eAlignRight);
      cQueenie.Animate(2, 9, eOnce, eNoBlock, eForwards);
      
      moveQueenieToBathroomState++;
      break;
    }
    case 2:
    {
      if (cQueenie.Animating) break;
      
      cQueenie.x += 10;
      cQueenie.UnlockView();
      cQueenie.SetIdleView(-1, 0);
      cQueenie.MyWalk(cQueenie.x + 7, cQueenie.y, eNoBlock, eAnywhere);
     
      moveQueenieToBathroomState++;
      break;
    }
    case 3:
    {
      if (cQueenie.Moving) break;
      
      if (!cQueenie.HasReachedDestination())
      {
        Point* destination = cQueenie.GetDestination();
        cQueenie.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveQueenieToBathroomState++;
      
      break;
    }
    case 4:
    {
      if (cQueenie.Moving) break;
      
      cQueenie.MyWalk(bathroomDoor.approachX, bathroomDoor.approachY, eNoBlock, eWalkableAreas);
      
      moveQueenieToBathroomState++;
      break;
    }
    case 5:
    {
      if (cQueenie.Moving) break;
      
      if (!cQueenie.HasReachedDestination())
      {
        Point* destination = cQueenie.GetDestination();
        cQueenie.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveQueenieToBathroomState++;
      
      break;
    }
    case 6:
    {
      if (cQueenie.Moving) break;
      
      cQueenie.FaceDirection(eDirectionLeft);
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eNoBlock, eForwards);
      
      moveQueenieToBathroomState++;
      break;
    }
    case 7:
    {
      if (bathroomDoor.doorObject.Animating) break;
      
      cQueenie.Walk(bathroomDoor.exitX, bathroomDoor.exitY, eNoBlock, eAnywhere);
      
      moveQueenieToBathroomState++;
      break;
      
    }
    case 8:
    {
      if (cQueenie.Moving) break;
      
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eBlock, eBackwards);
      
      moveQueenieToBathroomState++;
      break;
    }
    case 9:
    {
      if (bathroomDoor.doorObject.Animating) break;
      
      cQueenie.UnlockView();
      cQueenie.SetIdleView(QUEENIEIDLESIT_1153, 0);
      cQueenie.ChangeRoom(6, 85, 138);
      //cQueenie.Loop = 0;
      moveQueenieToBathroomState = 0;
      queenieAnimationCycle++;
      //setActiveCharacter();
      //StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      StartTimerBySeconds(cQueenie.ID, 2.0);
      
      break;
    }
  }
}

int moveQueenieToChairState = 0;
function moveQueenieToChair()
{
  switch (moveQueenieToChairState)
  {
    case 0:
    {
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eNoBlock, eForwards);
      
      moveQueenieToChairState++;
      break;
    }
    case 1:
    {
      if (bathroomDoor.doorObject.Animating) break;
      
      cQueenie.Walk(bathroomDoor.approachX, bathroomDoor.approachY, eNoBlock, eAnywhere);
      
      moveQueenieToChairState++;
      break;
    }
    case 2:
    {
      if (cQueenie.Moving) break;
      
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eNoBlock, eBackwards);
      
      moveQueenieToChairState++;
      break;
    }
    case 3:
    {
      if (bathroomDoor.doorObject.Animating) break;
      
      cQueenie.MyWalk(oChair7.X + 35, oChair7.Y - 8, eNoBlock, eWalkableAreas);
      
      moveQueenieToChairState++;
      break;
    }
    case 4:
    {
      if (cQueenie.Moving) break;
      
      if (!cQueenie.HasReachedDestination())
      {
        Point* destination = cQueenie.GetDestination();
        cQueenie.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveQueenieToChairState++;
      
      break;
    }
    case 5:
    {
      if (cQueenie.Moving) break;
 
      cQueenie.MyWalk(cQueenie.x, oChair7.Y, eNoBlock, eAnywhere);
      
      moveQueenieToChairState++;
      break;
    }
    case 6:
    {
      if (cQueenie.Moving) break;
      
      if (!cQueenie.HasReachedDestination())
      {
        Point* destination = cQueenie.GetDestination();
        cQueenie.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
        break;
      }
        
      moveQueenieToChairState++;
      
      break;
    }
    case 7:
    {
      if (cQueenie.Moving) break;
      
      cQueenie.SetIdleView(-1, 0);
      cQueenie.x -= 10;
      cQueenie.LockView(QUEENIEIDLESIT_1153);
      cQueenie.Animate(2, 9, eOnce, eNoBlock, eBackwards);
      
      moveQueenieToChairState++;
      break;
    }
    case 8:
    {
      if (cQueenie.Animating) break;

      cQueenie.UnlockView();
      cQueenie.SetIdleView(QUEENIEIDLESIT_1153, 0);
      cQueenie.Loop = 0;
      moveQueenieToChairState = 0;
      queenieAnimationCycle = 0;
      setActiveCharacter();
      oQueenieSmoke.Visible = true;
      StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
      StartTimerBySeconds(cQueenie.ID, 2.0);
      
      break;
    }
  }
}

int idleQueenieAtChairState = 101;
function idleQueenieAtChair()
{                                  
  switch (idleQueenieAtChairState)
  {
    case 0:
    {
      if (cQueenie.Animating) break;

      cQueenie.UnlockView();
      cQueenie.Loop = 0;
      oQueenieSmoke.Visible = true;
      
      idleQueenieAtChairState = 101;
      
      StartTimerBySeconds(cQueenie.ID, 2.0);
      
      break;
    }
    case 1:
    {
      if (cQueenie.Frame != 0 && oQueenieSmoke.Frame != 0) break;
      
      cQueenie.LockView(QUEENIEIDLESIT_1153);
      oQueenieSmoke.Visible = false;
      cQueenie.Animate(1, 9, eOnce, eNoBlock, eForwards);
      
      idleQueenieAtChairState = 0;
      break;
    }
    default:
    {
      if (!IsTimerExpired(cQueenie.ID)) break;

      if (cQueenie == activeCharacter)
      {
        queenieAnimationCycle++;
        idleQueenieAtChairState = 101;
        break;
      }
      
      idleQueenieAtChairState -= 100;

      break;
    }
  }
}

function idleQueenieAtBathroom()
{
  if (IsTimerExpired(cQueenie.ID))
  {
    cQueenie.ChangeRoom(player.Room, 30, 142);
    cQueenie.SetIdleView(QUEENIENORMAL_1151, 5);
    queenieAnimationCycle++;
    StartTimerBySeconds(cQueenie.ID, 2.0);
  }
}

function handleQueenie()
{
  switch (queenieAnimationCycle)
  {
    case 0:
    {
      idleQueenieAtChair();
      break;
    }
    case 1:
    {
      moveQueenieToBathroom();
      break;
    }
    case 2:
    {
      idleQueenieAtBathroom();
      break;
    }
    case 3:
    {
      moveQueenieToChair();
      break;
    }
  }
}

int objectSpeed = -1;
int cycleCounter = 0;

function handleClouds()
{
  cycleCounter++; // Increment the counter on each game cycle

  if (cycleCounter % 25 == 0) // Check if the counter is a multiple of 10
  {
    // Move object to the right if it hasn't reached the edge of the screen
    if (oCloudsA.X > -332)  // Replace 320 with the screen boundary you want
    {
        oCloudsA.X += objectSpeed; // Moves the object to the right
    }
    else
    {
        oCloudsA.X = 89; // Resets the object to the starting point if it reaches the edge
    }  
    
    if (oCloudsA.X > -332)  // Replace 320 with the screen boundary you want
    {
      oCloudsB.X += objectSpeed; // Moves the object to the right
    }
    else
    {
      oCloudsB.X = 509; // Resets the object to the starting point if it reaches the edge
    }  
  }
}

function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeft && Mouse.Mode == eModeExit)
  {
    if (oInsideCabinet.Visible)
    {
      cEgo.Animate(2, 9, eOnce, eBlock, eBackwards);
      cEgo.UnlockView();
      cEgo.FaceDirection(eDirectionRight);
      oInsideCabinet.Visible = false;
      
      return;
    }
    
    if (oInsideWastebasket.Visible)
    {
      cEgo.Animate(0, 9, eOnce, eBlock, eBackwards);
      cEgo.UnlockView();
      cEgo.FaceDirection(eDirectionLeft);
      oInsideWastebasket.Visible = false;
      
      return;
    }
    
    if (oSeatPocket.Visible)
    {
      cEgo.Animate(3, 9, eOnce, eBlock, eForwards);
      cEgo.UnlockView();
      cEgo.FaceDirection(eDirectionRight);
      oSeatPocket.Visible = false;
      
      return;
    }
  }

  if (!IsGamePaused())
  {
    if (button == eMouseRight && invCursorToggle)
    {
      return;
    }
    
    if ((button == eMouseRight) && (Mouse.IsOverWalkableArea() || Mouse.IsOverNothing()) && !(Mouse.IsOverHotspot()))
    {
      mouse.Mode = eModeLookat;
      Display("The cabin radiates understated luxury, with polished wood accents and the gentle hum of the engines setting a tranquil tone. Rows of seats align with windows that reveal a pastel sky, while a lounge area, complete with a plush couch and sleek table, makes it clear this is no ordinary flight.");
      choose_cursor();
      ClaimEvent();
    }
  }
}
function room_LeaveRight()
{
  cEgo.ChangeRoom(5);
}

function room_LeaveLeft()
{
  cEgo.ChangeRoom(6);
}

function loadClara()
{
  //cEgo.TurnOnDetails();
  switch(player.PreviousRoom)
  {
    case 5:
      cEgo.x = cockpitDoor.doorObject.X + 60;
      cEgo.y = cockpitDoor.doorObject.Y - 2;
      break;
    case 6:
      cEgo.x = bathroomDoor.doorObject.X - 20;
      cEgo.y = bathroomDoor.doorObject.Y - 2;
      break;
    default:
      break;
  }
}

function loadJoanna()
{
  if (player.PreviousRoom == 19) return;

  cJoanna.ChangeView(JOANNANORMAL_1101);
  cJoanna.SetIdleView(JOANNASIT_1103, 0);
  cJoanna.Loop = 0;
  cJoanna.ChangeRoom(player.Room, 224, 132);
  
  joannaAnimationCycle = 0;
  
  idleJoannaAtChairState = 101;
  previousIdleJoannaAtChairState = 101;
  moveJoannaToChairState = 0;
  
  idleJoannaAtTableState = 101;
  previousIdleJoannaAtTableState = 101;
  moveJoannaToTableState = 0;
  
  StartTimerBySeconds(cJoanna.ID, 2.0);
}

function loadCarlos()
{
  if (player.PreviousRoom == 19) return;
  
  oGlass.Visible = false;
  oGlass.Baseline = 128;
  oGlass.X = 417;
  oGlass.Y = 110;
  
  cCarlos.ChangeView(CARLOSNORMAL_1201);
  cCarlos.SetIdleView(CARLOSIDLESIT_1205, 0);
  cCarlos.Loop = 0;
  cCarlos.ChangeRoom(player.Room, 433, 134);
  
  carlosAnimationCycle = 0;
  
  idleCarlosAtTableState = 101;
  moveCarlosToTableState = 0;
  
  idleCarlosAtBackState = 101;
  moveCarlosToBackState = 0;
  
  StartTimerBySeconds(cCarlos.ID, 2.0);
}

function loadQueenie()
{
  switch(player.PreviousRoom)
  {
    case 6:
      cQueenie.ChangeRoom(player.Room, bathroomDoor.exitX, bathroomDoor.exitY);
      queenieAnimationCycle = 3;
      oQueenieSmoke.Visible = true;
      cQueenie.SetIdleView(-1, 0);
      break;
    case 19:
      return;
    default:
      cQueenie.ChangeRoom(player.Room, oChair7.X + 25, oChair7.Y - 2);
      queenieAnimationCycle = 0;
      oQueenieSmoke.Visible = false;
      cQueenie.SetIdleView(QUEENIEIDLESIT_1153, 0);
      break;
  }
  // this was causing queenie to be empty because QueenieNormal_1151 loop 3 frame 0 is empty
  // this only happens when we return here from notebook when we clicked on her
  // while she was smoking
  cQueenie.ChangeView(QUEENIENORMAL_1151);
  cQueenie.Loop = 0;
  
  idleQueenieAtChairState = 101;
  moveQueenieToChairState = 0;
  
  moveQueenieToBathroomState = 0;
  
  oQueenieSmoke.X = cQueenie.x - 17;
  oQueenieSmoke.Y = cQueenie.y;
  oQueenieSmoke.SetView(QUEENIEIDLESIT_1153, 3, 0);
  oQueenieSmoke.Animate(3, 9, eRepeat, eNoBlock, eForwards);
  
  StartTimerBySeconds(cQueenie.ID, 2.0);
}

function loadFlightAttendant()
{
  //cFlAttend.x = 490;
  //cFlAttend.y = 155;
  cSteward.FaceDirection(eDirectionLeft);
  //cFlAttend.FaceDirection(eDirectionLeft);
}

function initDoors()
{
  oBathroomDoor.SetView(AIRPLANEDOORS_5003);
  oCockpitDoor.SetView(AIRPLANEDOORS_5003);
  oCockpitDoor.Graphic = 1069;
  bathroomDoor.Init(oBathroomDoor, 35, 0, -20, -2);
  cockpitDoor.Init(oCockpitDoor, -25, 0, 30, -2);
}

function loadTimers()
{
  if (player.PreviousRoom == 19)
  {
    ResumeTimer(SET_ACTIVE_CHARACTER_TIMER);
    ResumeTimer(cCarlos.ID);
    ResumeTimer(cQueenie.ID);
    ResumeTimer(cJoanna.ID);
  }
  else
  {
    StartTimerBySeconds(SET_ACTIVE_CHARACTER_TIMER, 6.0);
    activeCharacter = null;
  }
}

function room_Load()
{
  //aAirplane_hum.Play(eAudioPriorityNormal, eRepeat);
  //a6001_AirplaneMusic.Play(eAudioPriorityNormal, eRepeat);
  
  initDoors();
  
  loadClara();
  loadJoanna();
  loadQueenie();
  loadCarlos();
  loadFlightAttendant();
}

function room_AfterFadeIn()
{
  loadTimers();

  switch(player.PreviousRoom)
  {
    case 5:
      cockpitDoor.doorObject.SetView(AIRPLANEDOORS_5003);
      cockpitDoor.doorObject.Animate(1, 9, eOnce, eBlock, eForwards);
      cEgo.Walk(cEgo.x - 80, cEgo.y + 5, eBlock, eAnywhere);
      cockpitDoor.doorObject.Animate(1, 9, eOnce, eBlock, eBackwards);
      break;
    case 6:
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eBlock, eForwards);
      cEgo.Walk(cEgo.x + 65, cEgo.y + 5, eBlock, eAnywhere);
      bathroomDoor.doorObject.Animate(0, 9, eOnce, eBlock, eBackwards);
      break;
    default:
      break;
  }
  
  if (activeDialog != null)
  {
    activeDialog.Start();
  }
}

function hWasteBasket_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("A small metal waste basket sat on the cabin floor near the lavatory, its open top revealing crumpled papers within.");
}

function hWasteBasket_Interact(Hotspot *theHotspot, CursorMode mode)
{
  cEgo.FaceDirection(eDirectionLeft);
  cEgo.LockViewAligned(CLARAMAINCABIN_1009, 0, eAlignRight);
  cEgo.Animate(0, 9, eOnce, eBlock);
  
  if (cEgo.HasInventory(iMagazine))
    oInsideWastebasket.Graphic = AIRPLANE_TRASH_EMPTY;
  else
    oInsideWastebasket.Graphic = AIRPLANE_TRASH_FULL;
  
  oInsideWastebasket.Baseline = 200;
  oInsideWastebasket.Visible = true;
}

function oInsideWastebasket_Handler()
{
  if (cEgo.HasInventory(iMagazine))
  {
    Display("Clara ruffles through the remaining wads of paper and realizes they are all identical.");
  }
  else
  {
    cEgo.Animate(1, 9, eOnce, eBlock);
    Display("Clara peers into the Waste Basket, spotting several crumpled wads of paper piled haphazardly inside. Curious, she reaches in and places it in her pocket.");
    cEgo.AddInventory(iCrumpledMagazine);
    oInsideWastebasket.Graphic = AIRPLANE_TRASH_EMPTY;
    cEgo.Animate(1, 9, eOnce, eBlock, eBackwards);
  }
}

function oInsideWastebasket_Interact(Object *theObject, CursorMode mode)
{
  oInsideWastebasket_Handler();
}

function oInsideWastebasket_Look(Object *theObject, CursorMode mode)
{
  oInsideWastebasket_Handler();
}

function oSeatPocket_Interact(Object *theObject, CursorMode mode)
{
  Display("Go to the magazine");

  /*
  cEgo.Animate(3, 9, eOnce, eBlock, eForwards);
  oSeatPocket.Visible = false;
  cEgo.UnlockView();
  cEgo.FaceDirection(eDirectionRight);
  */
}

function sitDown(Character *chara, Hotspot *hChair, int sitView, int sitLoop)
{
  chara.SetProperty("chairNumber", hChair1.ID);
  chara.SetProperty("isSitting", true);
  int currCharacterX = chara.x;
  
  chara.LockView(sitView);
  
  chara.x = (chara.x - 12);
  chara.Animate(sitLoop, 5, eOnce, eBlock, eBackwards);
}

function standUp(Character *chara, int standView, int standLoop)
{
  chara.SetProperty("isSitting", false);
  int currCharacterX = chara.x;
  
  chara.Animate(standLoop, 5, eOnce, eBlock, eForwards);
  cEgo.UnlockView(eStopMoving);
  cEgo.FaceDirection(eDirectionRight);
  chara.x = (currCharacterX + 12);
}

function oCockpitDoor_Interact(Object *cockPitDoor, CursorMode mode)
{
  oDoor_interact(cockPitDoor, 1, -5, 0, 100, -3, cEgo);
}

function oCockpitDoor_Look(Object *theObject, CursorMode mode)
{
  Display("The cockpit door is sturdy and unremarkable, its polished handle catching the light. Behind it, Clara can hear the faint murmur of activity as the pilot and copilot work to guide the plane safely toward Stonecliff Manor.");
}

function oBathroomDoor_Interact(Object *bathDoor, CursorMode mode)
{ 
  oDoor_interact(bathDoor, 0, 25, 0, -85, -3, cEgo);
}

function oBathroomDoor_Look(Object *theObject, CursorMode mode)
{
  Display("The bathroom door is simple with a small handle. It's clear where it leads—an essential space for passengers during long flights.");
}

function handlePopovers()
{
  if (oInsideWastebasket.Visible)
  {
    mouse.Mode = eModeExit;
    
    if (oInsideWastebasket.IsUnderMouse())
      mouse.Mode = eModeInteract;
      
    return;
  }
  
  if (oInsideCabinet.Visible)
  {
    mouse.Mode = eModeExit;
    
    if (oInsideCabinet.IsUnderMouse())
      mouse.Mode = eModeInteract;
      
    return;
  }
  
  if (oSeatPocket.Visible)
  {
    mouse.Mode = eModeExit;
    
    if (oSeatPocket.IsUnderMouse())
      mouse.Mode = eModeInteract;
      
    return;
  }
}

/*
Overlay *gameInfoOverlay;
function repeatedly_execute_always()
{
  if (gameInfoOverlay != null)
    gameInfoOverlay.Remove();
  
  gameInfoOverlay = Overlay.CreateTextual(50, 150, 120, Game.SpeechFont, 15, String.Format("speed: %d, \nactive timer: %.2f, queenie timer: %.2f, carlos timer: %.2f, joaana timer: %.2f",
    GetGameSpeed(), GetTimeRemainingInSeconds(SET_ACTIVE_CHARACTER_TIMER), GetTimeRemainingInSeconds(cQueenie.ID), GetTimeRemainingInSeconds(cCarlos.ID), GetTimeRemainingInSeconds(cJoanna.ID)));
}
*/

function repeatedly_execute()
{
  if (activeCharacter == null)
  {
    cSteward.AddWaypoint(bathroomDoor.approachX, bathroomDoor.approachY);
    cSteward.AddWaypoint(cockpitDoor.approachX, cockpitDoor.approachY);
    setActiveCharacter();
  }
  
  handlePopovers();
  
  handleCarlos();
  handleJoanna();
  handleQueenie();
  
  handleClouds();
}

/*function sitClaraInChair(Hotspot *theChair)
{
  cEgo.LockViewAligned(CLARASIT_1003, 3, eAlignRight);
  cEgo.Animate(3, 9, eOnce, eBlock, eBackwards);
  oSeatPocket.X = cEgo.x + 30;
  oSeatPocket.Y = cEgo.y - 20;
  oSeatPocket.Baseline = 200;
  oSeatPocket.Visible = true;
}*/

function sitClaraInChair(Object *theChair)
{
  if  (theChair.Y >= 140)
    cEgo.Walk(theChair.X+37, theChair.Y, eBlock, eWalkableAreas);
  else
    cEgo.Walk(theChair.X+37, theChair.Y-1, eBlock, eWalkableAreas);
  cEgo.LockViewAligned(CLARASIT_1003, 3, eAlignRight);
  cEgo.Animate(3, 9, eOnce, eBlock, eBackwards);
  oSeatPocket.X = cEgo.x + 30;
  oSeatPocket.Y = cEgo.y - 20;
  oSeatPocket.Baseline = 200;
  oSeatPocket.Visible = true;
}

function oChair1_Interact(Object *theObject, CursorMode mode)
{
  sitClaraInChair(theObject);
}

function oChair2_Interact(Object *theObject, CursorMode mode)
{
  sitClaraInChair(theObject);
}

function oChair3_Interact(Object *theObject, CursorMode mode)
{
  sitClaraInChair(theObject);
}

function oChair4_Interact(Object *theObject, CursorMode mode)
{
  Display("That’s Joanna's seat. It wouldn’t be proper to sit there.");
}

function oChair5_Interact(Object *theObject, CursorMode mode)
{
  sitClaraInChair(theObject);
}

function oChair6_Interact(Object *theObject, CursorMode mode)
{
  sitClaraInChair(theObject);
}

function oChair7_Interact(Object *theObject, CursorMode mode)
{
  Display("That’s Queenie's seat. It wouldn’t be proper to sit there.");
}

function oChair8_Interact(Object *theObject, CursorMode mode)
{
  Display("That’s Carlos's seat. It wouldn’t be proper to sit there.");
}

function oChair_Look(Object *theObject, CursorMode mode)
{
  Display("The airplane seats are neatly arranged in rows, each featuring adjustable armrests and immaculate cushions. A magazine rests in each seat pocket, its cover tempting Clara to take a closer look.");
}

function hCabinet_Interact(Hotspot *theHotspot, CursorMode mode)
{
  if (cFlAttend.Room == player.Room)
  {
    Display("Flight attendant is in the way");
    return;
  }
  cEgo.Walk(490, 155, eBlock, eWalkableAreas);
  cEgo.FaceDirection(eDirectionRight);
  cEgo.LockViewAligned(CLARAMAINCABIN_1009, 2, eAlignLeft);
  cEgo.Animate(2, 9, eOnce, eBlock);
  
  if (cEgo.HasInventory(iCigar))
    oInsideCabinet.Graphic = AIRPLANE_CABINET_EMPTY;
  else
    oInsideCabinet.Graphic = AIRPLANE_CABINET_FULL;
  
  oInsideCabinet.Baseline = 200;
  oInsideCabinet.X = 304;
  oInsideCabinet.Y = 138;
  oInsideCabinet.Visible = true;
}

function hCabinet_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("The minibar is a compact, unassuming cabinet, seamlessly blending into the cabin's refined decor. Its contents are neatly tucked away behind closed doors.");
}

function oInsideCabinet_Interact(Object *theObject, CursorMode mode)
{
  if (cEgo.HasInventory(iCigar))
  {
    Display("Tbere is nothing more to get here");

    cEgo.Animate(2, 9, eOnce, eBlock, eBackwards);
    cEgo.UnlockView();
    cEgo.FaceDirection(eDirectionRight);
    oInsideCabinet.Visible = false;
    
    return;
  }

  Display("You pick it up and place it in your purse.");
  cEgo.AddInventory(iCigar);
  oInsideCabinet.Graphic = AIRPLANE_CABINET_EMPTY;
}

function oInsideCabinet_Look(Object *theObject, CursorMode mode)
{
  Display("Hmmmm.... fresh.");
}

function oGlass_Look(Object *theObject, CursorMode mode)
{
  cEgo.Walk(theObject.X, theObject.Y, eBlock, eWalkableAreas);
  cEgo.FaceObject(theObject);
  Display("Clara examines Carlos's glass and spots a faint fingerprint on the side, left behind in the condensation. It's an easy clue to overlook, but not for her sharp eye.");
}

function oGlass_Interact(Object *theObject, CursorMode mode)
{
  cEgo.Walk(theObject.X, theObject.Y, eBlock, eWalkableAreas);
  cEgo.FaceObject(theObject);
  Display("Clara examines Carlos's glass and spots a faint fingerprint on the side, left behind in the condensation. It's an easy clue to overlook, but not for her sharp eye.");
}

function hTable_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("The sleek, curved couch exudes luxury, a far cry from anything found on a typical passenger flight. Its pristine upholstery is unsurprising—nothing less would be expected from Xavier Montague Stone's private jet.");
}

function hCabinCouch_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("The sleek, curved couch exudes luxury, a far cry from anything found on a typical passenger flight. Its pristine upholstery is unsurprising—nothing less would be expected from Xavier Montague Stone's private jet.");
}

function hEmergencyDoor_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("The emergency door looms as a stark reminder of the fragility of air travel. Clara has no intention of opening it… unless, of course, there's an emergency or perhaps curiosity to quench.");
}

function hEmergencyDoor_Interact(Hotspot *theHotspot, CursorMode mode)
{
  //Clara begins to open door
  Display("As Clara opens the emergency door, a deafening roar fills the cabin. The sudden rush of wind pulls her off balance, and before she can react, she's yanked out into the open sky, plummeting toward the ground below.");
  //Clara completlly opens door and is sucked out
  //Falling from airplane death sequence
}

function hHotspot14_Look(Hotspot *theHotspot, CursorMode mode)
{
  Display("The windows offer a picturesque view of the sky, with soft clouds rolling past like a living painting. The sunlight streams through, giving the cabin a warm, serene glow. It's a peaceful moment, but Clara's investigative instincts remind her to stay alert.");
}

function room_Leave()
{
  PauseTimer(SET_ACTIVE_CHARACTER_TIMER);
  PauseTimer(cQueenie.ID);
  PauseTimer(cCarlos.ID);
  PauseTimer(cJoanna.ID);
}
