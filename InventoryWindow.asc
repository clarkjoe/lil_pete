NotebookButton* inventoryWindowButtons[];

function initialize_inventory_window()
{
  inventoryWindowButtons = new NotebookButton[3];
  
  for (int i = 0; i < Game.GetFrameCountForLoop(INVENTORYITEMS, 3); i++)
  {
    inventoryWindowButtons[i] = new NotebookButton();
    NotebookButton *inventoryWindowButton = inventoryWindowButtons[i];
    
    ViewFrame *colorViewFrame = Game.GetViewFrame(INVENTORYITEMS, 3, i);
    ViewFrame *mouseOverViewFrame = Game.GetViewFrame(INVENTORYITEMS, 4, i);
    ViewFrame *pushedViewFrame = Game.GetViewFrame(INVENTORYITEMS, 5, i);
    ViewFrame *silhouetteViewFrame = Game.GetViewFrame(INVENTORYITEMS, 6, i);
    
    inventoryWindowButton.coloredGraphic = colorViewFrame.Graphic;
    inventoryWindowButton.coloredMousedOverGraphic = mouseOverViewFrame.Graphic;
    inventoryWindowButton.coloredPushedGraphic = pushedViewFrame.Graphic;

    inventoryWindowButton.greyGraphic = colorViewFrame.Graphic;
    inventoryWindowButton.greyMousedOverGraphic = colorViewFrame.Graphic;
    inventoryWindowButton.greyPushedGraphic = colorViewFrame.Graphic;

    inventoryWindowButton.silhouetteGraphic = silhouetteViewFrame.Graphic;
    inventoryWindowButton.silhouetteMousedOverGraphic = silhouetteViewFrame.Graphic;
    inventoryWindowButton.silhouettePushedGraphic = silhouetteViewFrame.Graphic;
    
    inventoryWindowButton.variant = eSilhouette;
    
    Button *inventoryWindowControlButton;
    if (i == 2)
      inventoryWindowControlButton = gInventory.Controls[i+4].AsButton;
    else
      inventoryWindowControlButton = gInventory.Controls[i+1].AsButton;
      
    inventoryWindowControlButton.Clickable = false;
    inventoryWindowControlButton.NormalGraphic = silhouetteViewFrame.Graphic;
    inventoryWindowControlButton.MouseOverGraphic = silhouetteViewFrame.Graphic;
    inventoryWindowControlButton.PushedGraphic = silhouetteViewFrame.Graphic;
    
    if (i == 0)
    {
      inventoryWindowControlButton.Clickable = true;
      inventoryWindowControlButton.NormalGraphic = colorViewFrame.Graphic;
      inventoryWindowControlButton.MouseOverGraphic = mouseOverViewFrame.Graphic;
      inventoryWindowControlButton.PushedGraphic = pushedViewFrame.Graphic;
    }
    else
    {
      inventoryWindowControlButton.Clickable = false;
      inventoryWindowControlButton.NormalGraphic = silhouetteViewFrame.Graphic;
      inventoryWindowControlButton.MouseOverGraphic = silhouetteViewFrame.Graphic;
      inventoryWindowControlButton.PushedGraphic = silhouetteViewFrame.Graphic;
    }
  }
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  initialize_inventory_window();
  open_gui(gInventory);
}

function btnInvWinClose_OnClickHandler(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function btnInvWinUp_OnClickHandler(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvWinDown_OnClickHandler(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvWinPointer_OnClickHandler(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function btnInvWinCompactAndClearTape_OnClickHandler(GUIControl *control, MouseButton button)
{
}

function btnInvWinLens_OnClickHandler(GUIControl *control, MouseButton button)
{
}
