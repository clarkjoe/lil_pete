function cCarlos_LookHandler(Character *theCharacter, CursorMode mode)
{
  dAll_CarlosDesc.Start();
}

function cCarlos_TalkHandler(Character *theCharacter, CursorMode mode) 
{
  if (!theCharacter.TalkHandler_Before()) 
  {
    return;
  }

  // Prevent talking if Carlos is sitting and animating
  if (theCharacter.Sitting() && theCharacter.Animating) 
  {
    mouse.UseModeGraphic(eModeWait);
    return;
  }

  // First-time conversation
  if (!cCarlos.GetProperty("haveSpokenTo")) 
  {
    dPrologue_CarlosCharacters.Start();
    /*cEgo.Say("Mind if I join you, Carlos?");
    cCarlos.Say("Not in the mood for a conversation, sweetheart.");
    
    cCarlos.SetProperty("haveSpokenTo",true);

    cEgo.ColorInCharacter(cCarlos);
    cJoanna.ColorInCharacter(cCarlos);
    cQueenie.ColorInCharacter(cCarlos);
    cCarlos.ColorInCharacter(cCarlos);*/
  }

  // Check if Carlos has a cigar
  /*if (!cCarlos.HasInventory(iCigar)) 
  {
    cCarlos.Say("Not in the mood for a conversation, sweetheart.");
    return;
  }*/

  // Set dialog contexts and transition to conversation room
  activeCharacterDialog = dPrologue_CarlosCharacters;
  activeSubjectDialog = dPrologue_CarlosTopics;
  // activeEvidenceDialog = dPrologue_JoannaEvidence;

  activeDialog = activeCharacterDialog;
  currentNotebookContextID = theCharacter.ID;
  cEgo.ChangeRoom(19);
}

function cCarlos_UseInvHandler(Character *theCharacter, CursorMode mode)
{
  dPrologue_CarlosInv.Start();
}

int gameFrame = 0;
function repeatedly_execute_always()
{
  /*
  if (cEgo.IsDestination(this))
  {
    return false;
  }
  // Check if WalkWhere is eWalkableAreas and the target coordinate is not walkable
  if (walkWhere == eWalkableAreas && GetWalkableAreaAtRoom(x, y) == 0) 
  {
    // Find the nearest walkable coordinate
    Point* validPoint = FindNearestWalkable(x, y);
    if (validPoint != null) 
    {
      x = validPoint.x;
      y = validPoint.y;
    }
    else 
    {
      return false; // No walkable area found; walking cannot proceed
    }
  }

  // If character is already moving, let them finish walking
  if (this.Moving)
    return false;

  // Retrieve the current destination
  Point* destination = this.Destination();

  // If no destination is set, or if the requested destination is different, set it
  if (destination == null || destination.x != x || destination.y != y) 
  {
    this.Walk(x, y, blockingStyle, walkWhere);
    this.Destination(this.DestinationX, this.DestinationY);
    return false;
  }

  // If the destination exists but has not been reached, resume walking
  if (!this.HasReachedDestination())
  {
    this.Walk(destination.x, destination.y, blockingStyle, walkWhere);
    return false;
  }

  // If all checks pass, the character has reached the destination
  return true;
  */
}