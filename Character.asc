Overlay* characterOverlays[];

function TalkerSay(this Character*, const string text)
{
  this.Say(text);
}

function TurnOnDetails(this Character*)
{
  this.SetProperty("showDetails", true);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *newOverlay = Overlay.CreateTextual(50, 50, 120, Game.SpeechFont, 15,
    String.Format("%s room: %d, prevRoom: %d, x: %d, y: %d, view: %d, loop: %d, frame: %d",
      this.Name, this.Room, this.PreviousRoom, this.x, this.y, this.View, this.Loop, this.Frame));
  characterOverlays[this.ID] = newOverlay;
}

function TurnOffDetails(this Character*)
{
  this.SetProperty("showDetails", false);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *currentOverlay = characterOverlays[this.ID];
  currentOverlay.Remove();
}

bool ShowDetails(this Character*)
{
  return this.GetProperty("showDetails");
}

Point* Destination(this Character*, int x, int y)
{
  if (x == -1 || y == -1)
  {
    Point* destination = new Point();
    destination.x = this.GetProperty("destinationX");
    destination.y = this.GetProperty("destinationY");
    
    if (destination.x == -1 || destination.y == -1)
    {
      //System.Log(eLogError, String.Format("Destination is invalid -- x: %d, y: %d", destination.x, destination.y));
    }
    
    return destination;
  }
  
  this.SetProperty("destinationX", x);
  this.SetProperty("destinationY", y);
  
  Point* destination = new Point();
  destination.x = this.GetProperty("destinationX");
  destination.y = this.GetProperty("destinationY");
  
  return destination;
}

LocationType DestinationType(this Character*, LocationType destinationType)
{
  if (destinationType == -1)
  {
    return this.GetProperty("destinationType");
  }
  
  this.SetProperty("destinationType", destinationType);
  return this.GetProperty("destinationType");
}

int DestinationID(this Character*, int destinationID)
{
  if (destinationID == -1)
  {
    return this.GetProperty("destinationID");
  }
  
  this.SetProperty("destinationID", destinationID);
  return this.GetProperty("destinationID");
}

bool IsDestination(this Character*, Character* targetCharacter)
{
  if (this.DestinationType() != eLocationCharacter)
  {
    return false;
  }
  
  return this.DestinationID() == targetCharacter.ID;
}

bool HasReachedDestination(this Character*)
{
  Point* destination = this.Destination();
  return destination.x == this.x && destination.y == this.y;
}

bool ResumableWalk(this Character*, int x, int y, BlockingStyle blockingStyle, WalkWhere walkWhere) 
{
  if (cEgo.IsDestination(this))
  {
    return false;
  }
  // Check if WalkWhere is eWalkableAreas and the target coordinate is not walkable
  if (walkWhere == eWalkableAreas && GetWalkableAreaAtRoom(x, y) == 0) 
  {
    // Find the nearest walkable coordinate
    Point* validPoint = FindNearestWalkable(x, y);
    if (validPoint != null) 
    {
      x = validPoint.x;
      y = validPoint.y;
    }
    else 
    {
      return false; // No walkable area found; walking cannot proceed
    }
  }

  // If character is already moving, let them finish walking
  if (this.Moving)
    return false;

  // Retrieve the current destination
  Point* destination = this.Destination();

  // If no destination is set, or if the requested destination is different, set it
  if (destination == null || destination.x != x || destination.y != y) 
  {
    this.Walk(x, y, blockingStyle, walkWhere);
    this.Destination(this.DestinationX, this.DestinationY);
    return false;
  }

  // If the destination exists but has not been reached, resume walking
  if (!this.HasReachedDestination())
  {
    this.Walk(destination.x, destination.y, blockingStyle, walkWhere);
    return false;
  }

  // If all checks pass, the character has reached the destination
  return true;
}

int Graphic(this Character*)
{
  ViewFrame *viewFrame = Game.GetViewFrame(this.View, this.Loop, this.Frame);
  return viewFrame.Graphic;
}

bool Sitting(this Character*, bool sitting)
{
  if (sitting == -1)
    return this.GetProperty("sitting");
    
  this.SetProperty("sitting", sitting);
}

CharacterDirection Direction(this Character*, CharacterDirection direction, BlockingStyle blockingStyle)
{
  if (direction == eDirectionNone)
  {
    return this.GetProperty("direction");
  }
  
  this.FaceDirection(direction, blockingStyle);
  this.SetProperty("direction", direction);
}

CharacterDirection DestinationDirection(this Character*, CharacterDirection direction)
{
  if (direction == eDirectionNone)
  {
    return this.GetProperty("destinationDirection");
  }
  
  this.SetProperty("destinationDirection", direction);
  return this.GetProperty("destinationDirection");
}

function ColorInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eColored);
}

function GreyInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eGrey);
}

function SilhouetteInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eSilhouette);
}

bool CharacterIsColor(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eColored;
}

bool CharacterIsGrey(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eGrey;
}

bool CharacterIsSilhouette(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eSilhouette;
}

function ColorInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInCharacter(actionCharacter);
  }
}

function GreyInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInCharacter(actionCharacter);
  }
}

function SilhouetteInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInCharacter(actionCharacter);
  }
}

function ColorInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eColored);
}

function GreyInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eGrey);
}

function SilhouetteInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eSilhouette);
}

bool SubjectIsColor(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

bool SubjectIsGrey(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

bool SubjectIsSilhouette(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

function ColorInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInSubject(subject);
  }
}

function GreyInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInSubject(subject);
  }
}

function SilhouetteInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInSubject(subject);
  }
}

function ColorInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eColored);
}

function GreyInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eGrey);
}

function SilhouetteInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eSilhouette);
}

bool EvidenceIsColor(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

bool EvidenceIsGrey(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

bool EvidenceIsSilhouette(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

function ColorInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInEvidence(evidence);
  }
}

function GreyInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInEvidence(evidence);
  }
}

function SilhouetteInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInEvidence(evidence);
  }
}

function handle_overlays()
{
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
  }
  
  int currentOverlayX = 25;
  int currentOverlayY = 25;
  for (int i = 0; i < Game.CharacterCount; i++) 
  {
    Character* currentCharacter = character[i];

    if (currentCharacter.ShowDetails()) 
    {
      if (characterOverlays[i] != null)
        characterOverlays[i].Remove();
        
      characterOverlays[i] = Overlay.CreateTextual(
        currentOverlayX, currentOverlayY, 120, Game.SpeechFont, 15, 
        String.Format("%s room: %d, prevRoom: %d, x: %d, y: %d, view: %d, loop: %d, frame: %d", 
                      currentCharacter.Name, currentCharacter.Room, currentCharacter.PreviousRoom,
                      currentCharacter.x, currentCharacter.y,
                      currentCharacter.View, currentCharacter.Loop, currentCharacter.Frame));
                      
      currentOverlayY = (characterOverlays[i].Y + characterOverlays[i].Height);
    }
    else
    {
      if (characterOverlays[i] != null) 
      {
        characterOverlays[i].Remove();
        characterOverlays[i] = null;
      }
    }
  }
}

int GetFurthestRightX(this Character*)
{
  // Get the current sprite ID
  int spriteID = this.Graphic();
  
  // Create a dynamic sprite to retrieve dimensions
  DynamicSprite* sprite = DynamicSprite.CreateFromExistingSprite(spriteID);
  int spriteWidth = sprite.Width; // Get the sprite's width
  sprite.Delete(); // Clean up to prevent memory leaks
  
  // Calculate the farthest right X-coordinate
  return this.x + (spriteWidth / 2);
}

int GetFurthestLeftX(this Character*)
{
  // Get the current sprite ID
  int spriteID = this.Graphic();
  
  // Create a dynamic sprite to retrieve dimensions
  DynamicSprite* sprite = DynamicSprite.CreateFromExistingSprite(spriteID);
  int spriteWidth = sprite.Width; // Get the sprite's width
  sprite.Delete(); // Clean up to prevent memory leaks
  
  // Calculate the farthest right X-coordinate
  return this.x - (spriteWidth / 2);
}

bool CancelableWalk(this Character*, int x, int y, CharacterDirection dir)
{
  this.Destination(x, y);
  this.DestinationDirection(dir);
  this.Walk(x, y);
  return this.HasReachedDestination();
}

bool SendToCharacterSide(this Character*, Character* targetCharacter, int offset, bool toRight)
{
  int x;
  if (toRight)
  {
    x = targetCharacter.GetFurthestRightX() + offset;
  }
  else
  {
    x = targetCharacter.GetFurthestLeftX() - offset;
  }

  int y = targetCharacter.y;
  return this.CancelableWalk(x, y, eDirectionNone);
}

bool SendToCharacterVertical(this Character*, Character* targetCharacter, int offset, bool toBottom)
{
    int x = targetCharacter.x + 5; // Small horizontal adjustment
    int y;
    
    if (toBottom)
    {
      y = targetCharacter.y + targetCharacter.BlockingHeight + offset;
    }
    else
    {
      y = targetCharacter.y - targetCharacter.BlockingHeight - offset;
    }

    // Ensure the position is walkable
    y = FindNearestWalkableY(x, y);
    return this.CancelableWalk(x, y, eDirectionNone);
}

bool SendToCharacter(this Character*, Character* targetCharacter, int offset)
{
  if (targetCharacter.Sitting())
  {
    // Move to the side the target is facing
    bool toRight = false;
    if (targetCharacter.Direction() == eDirectionRight)
    {
      toRight = true;
    }
    return this.SendToCharacterSide(targetCharacter, offset, toRight);
  } 
  else
  {
    // Move to the closest horizontal side
    targetCharacter.StopMoving();
    bool toLeft = false;
    if (this.x < targetCharacter.x)
    {
      toLeft = true;
    }
    return this.SendToCharacterSide(targetCharacter, offset, !toLeft);
  }
}

bool TalkHandler_Before(this Character*)
{
    if (!cEgo.SendToCharacter(this)) {
      return false;
    }
    
    if (cEgo.Room == this.Room)
    {
      cEgo.FaceCharacter(this);
      this.FaceCharacter(cEgo);
    }
    
    return true;
}