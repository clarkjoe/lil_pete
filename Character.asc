Overlay* characterOverlays[];

function TalkerSay(this Character*, const string text)
{
  this.Say(text);
}

function TurnOnDetails(this Character*)
{
  this.SetProperty("showDetails", true);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *newOverlay = Overlay.CreateTextual(50, 50, 120, Game.SpeechFont, 15,
    String.Format("%s room: %d, prevRoom: %d, x: %d, y: %d, view: %d, loop: %d, frame: %d",
      this.Name, this.Room, this.PreviousRoom, this.x, this.y, this.View, this.Loop, this.Frame));
  characterOverlays[this.ID] = newOverlay;
}

function TurnOffDetails(this Character*)
{
  this.SetProperty("showDetails", false);
  
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
    return;
  }
  
  Overlay *currentOverlay = characterOverlays[this.ID];
  currentOverlay.Remove();
}

bool ShowDetails(this Character*)
{
  return this.GetProperty("showDetails");
}

function SendToCharacterNear(this Character*, Character* target, int maxDistance) {
  int dx = target.x - this.x;
  int dy = target.y - this.y;
  float magnitude = Maths.Sqrt(IntToFloat(dx * dx + dy * dy));

  if (magnitude <= IntToFloat(maxDistance)) {
    // Already within the maximum distance; walk directly to the target
    this.Walk(target.x, target.y, eBlock, eWalkableAreas);
  } else {
    // Scale the offset to ensure the sender stops at the maximum distance
    dx = FloatToInt(IntToFloat(dx) / magnitude * IntToFloat(maxDistance));
    dy = FloatToInt(IntToFloat(dy) / magnitude * IntToFloat(maxDistance));
    this.Walk(target.x - dx, target.y - dy, eBlock, eWalkableAreas);
  }
}

Point* GetDestination(this Character*)
{
  if (this.GetProperty("destinationX") == 0)
  {
    //Display(String.Format("destinationX for <%s> not set", this.ScriptName));
    return null;
  }
  
  if (this.GetProperty("destinationY") == 0)
  {
    //Display(String.Format("destinationY for <%s> not set", this.ScriptName));
    return null;
  }
  
  Point* destination = new Point();
  destination.x = this.GetProperty("destinationX");
  destination.y = this.GetProperty("destinationY");
  
  return destination;
}

function SetDestination(this Character*, int x, int y)
{
  this.SetProperty("destinationX", x);
  this.SetProperty("destinationY", y);
}

bool HasReachedDestination(this Character*)
{
  Point* destination = this.GetDestination();
  return destination.x == this.x && destination.y == this.y;
}

function MyWalk(this Character*, int x, int y, BlockingStyle blockingStyle, WalkWhere walkWhere)
{
  this.Walk(x, y, blockingStyle, walkWhere);
  this.SetDestination(this.DestinationX, this.DestinationY);
}

bool ResumableWalk(this Character*, int x, int y, WalkWhere walkWhere)
{
  if (this.Moving)
    return false;
    
  Point* destination = this.GetDestination();
  
  if (destination == null)
  {
    this.MyWalk(x, y, eNoBlock, walkWhere);
    return false;
  }
  
  if (!this.HasReachedDestination())
  {
    this.MyWalk(destination.x, destination.y, eNoBlock, eWalkableAreas);
    return false;
  }
  
  return true;
}

function ColorInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eColored);
}

function GreyInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eGrey);
}

function SilhouetteInCharacter(this Character*, Character *actionCharacter)
{
  change_context_notebook_character_button_variant(this, actionCharacter, eSilhouette);
}

bool CharacterIsColor(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eColored;
}

bool CharacterIsGrey(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eGrey;
}

bool CharacterIsSilhouette(this Character*, Character *actionCharacter)
{
  return get_notebook_character_button_variant(this, actionCharacter) == eSilhouette;
}

function ColorInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInCharacter(actionCharacter);
  }
}

function GreyInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInCharacter(actionCharacter);
  }
}

function SilhouetteInCharacterEverywhere(static Character, Character *actionCharacter)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInCharacter(actionCharacter);
  }
}

function ColorInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eColored);
}

function GreyInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eGrey);
}

function SilhouetteInSubject(this Character*, Button *subject)
{
  change_context_notebook_subject_button_variant(this, subject.ID - 3, eSilhouette);
}

bool SubjectIsColor(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

bool SubjectIsGrey(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

bool SubjectIsSilhouette(this Character*, Button *subject)
{
  return get_notebook_subject_button_variant(this, subject.ID - 3) == eSilhouette;
}

function ColorInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInSubject(subject);
  }
}

function GreyInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInSubject(subject);
  }
}

function SilhouetteInSubjectEverywhere(static Character, Button *subject)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInSubject(subject);
  }
}

function ColorInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eColored);
}

function GreyInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eGrey);
}

function SilhouetteInEvidence(this Character*, Button *evidence)
{
  change_context_notebook_evidence_button_variant(this, evidence.ID, eSilhouette);
}

bool EvidenceIsColor(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

bool EvidenceIsGrey(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

bool EvidenceIsSilhouette(this Character*, Button *evidence)
{
  return get_notebook_evidence_button_variant(this, evidence.ID) == eSilhouette;
}

function ColorInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.ColorInEvidence(evidence);
  }
}


function GreyInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.GreyInEvidence(evidence);
  }
}

function SilhouetteInEvidenceEverywhere(static Character, Button *evidence)
{
  for (int i = 0; i < 12; i++)
  {
    Character *contextCharacter = character[i];
    contextCharacter.SilhouetteInEvidence(evidence);
  }
}

function handle_overlays()
{
  if (characterOverlays == null)
  {
    characterOverlays = new Overlay[Game.CharacterCount];
  }
  
  int currentOverlayX = 25;
  int currentOverlayY = 25;
  for (int i = 0; i < Game.CharacterCount; i++) 
  {
    Character* currentCharacter = character[i];

    if (currentCharacter.ShowDetails()) 
    {
      if (characterOverlays[i] != null)
        characterOverlays[i].Remove();
        
      characterOverlays[i] = Overlay.CreateTextual(
        currentOverlayX, currentOverlayY, 120, Game.SpeechFont, 15, 
        String.Format("%s room: %d, prevRoom: %d, x: %d, y: %d, view: %d, loop: %d, frame: %d", 
                      currentCharacter.Name, currentCharacter.Room, currentCharacter.PreviousRoom,
                      currentCharacter.x, currentCharacter.y,
                      currentCharacter.View, currentCharacter.Loop, currentCharacter.Frame));
                      
      currentOverlayY = (characterOverlays[i].Y + characterOverlays[i].Height);
    }
    else
    {
      if (characterOverlays[i] != null) 
      {
        characterOverlays[i].Remove();
        characterOverlays[i] = null;
      }
    }
  }
}

int tgx, tgy;
CharacterDirection tfd;
bool arrived;
int lt, lid, mm;

bool CancelableWalk(this Character*, int x, int y, CharacterDirection dir) {
  tgx = x;
  tgy = y;
  tfd = dir;
  player.Walk(x, y);
  return arrived;
}

function repeatedly_execute() {
  if (tgx == -1000) return;
  if (!arrived && player.x == tgx && player.y == tgy) {
    arrived = true;
    tgx = -1000;
    player.FaceDirection(tfd, eNoBlock);
    if (lt == eLocationHotspot) hotspot[lid].RunInteraction(mm);
    if (lt == eLocationObject) object[lid].RunInteraction(mm);
    if (lt == eLocationCharacter) character[lid].RunInteraction(mm);
  }
}

function on_mouse_click(MouseButton button) {
  if (button == eMouseLeft) {
    lt = GetLocationType(mouse.x, mouse.y);
    if (lt == eLocationNothing)
      return;
    ClaimEvent();
    arrived = false;
    tgx = -1000; // 2024-01-03 fix, thanks cat
    player.StopMoving(); // added to cancel previous approach
    if (lt == eLocationHotspot) {
      Hotspot*h = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
      lid = h.ID;
    }
    else if (lt == eLocationObject) {
      Object*o = Object.GetAtScreenXY(mouse.x, mouse.y);
      lid = o.ID;
    }
    else if (lt == eLocationCharacter) {
      Character*c = Character.GetAtScreenXY(mouse.x, mouse.y);
      lid = c.ID;
    }
    mm = mouse.Mode;
    Room.ProcessClick(mouse.x, mouse.y, mm);
  }
}

function on_event (EventType event, int data) {
  if (event == eEventEnterRoomBeforeFadein) arrived = true;
}