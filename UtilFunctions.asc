int currentLoop;

bool IsAnyGUIOpen() {
  for (int GUI_ID = 0; GUI_ID < Game.GUICount; GUI_ID++)
  {
    if (GUI_ID == 0 || GUI_ID == 1) continue;
    
    if (gui[GUI_ID].Visible)
    {
      //Display(String.Format("%d", gui[GUI_ID].ID));
      return true;
    }
  }
  return false;
}

bool cursorOnIconBarGUI()
{
  GUI *currentGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
  return currentGUI == gIconbar;
}

bool cursorOnInventoryGUI()
{
  GUI *currentGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
  return currentGUI == gInventory;
}

function handleCursorOnIconBarGUI()
{
  mouse.Mode = eModePointer;
}

Overlay *gameInfoOverlay;
function show_room_cursor_details(Character* overCharacter, Object* overObject, Hotspot* overHotspot)
{
  if (gameInfoOverlay != null)
    gameInfoOverlay.Remove();
    
  int charaBase = 0;
  int objBase = 0;
  int hpBase = 0;
  
  if (overCharacter != null)
    charaBase = overCharacter.y;
  if (overObject != null)
    objBase = overObject.Y;
  if (overHotspot != null)
    hpBase = overHotspot.Baseline();
  
  gameInfoOverlay = Overlay.CreateTextual(50, 150, 120, Game.SpeechFont, 15, String.Format("over character: %d\nover object: %d\nover hotspot: %d",
    charaBase, objBase, hpBase));
}

function choose_room_cursor()
{
  if (invCursorToggle && mouse.Mode != eModeUseinv) mouse.Mode = eModeUseinv;
  if (mouse.Mode == eModeUseinv && invCursorToggle) return;
    
  Character* overCharacter = Mouse.GetOverCharacter();
  Object* overObject = Mouse.GetOverObject();
  Hotspot* overHotspot = Mouse.GetOverHotspot();

  int maxBaseline = -1;
  int selectedMode = eModeWalkto;

  if (overHotspot != null && overHotspot.Baseline() > maxBaseline)
  {
    if (overHotspot.IsInteractable())
      selectedMode = eModeInteract;
    maxBaseline = overHotspot.Baseline();
  }

  if (overObject != null && overObject.Y > maxBaseline)
  {
    if (overObject.IsInteractable() && overObject.Clickable)
      selectedMode = eModeInteract;
    maxBaseline = overObject.Y;
  }
  
  if (overCharacter != null && overCharacter.y > maxBaseline)
  {
    selectedMode = eModeTalkto;
    maxBaseline = overCharacter.y;
  }

  mouse.Mode = selectedMode;
}

bool cursorPreviouslyOnIconGui = false;
function choose_cursor()
{
  if (cursorOnIconBarGUI())
  {
    handleCursorOnIconBarGUI();
    return;
  }
  
  if (gInventory.Visible)
  {
    return;
  }
  
  if (mouse.Mode == eModeInvalid)
  {
    if (timeToShowInvalid < 0)
    {
      mouse.Mode = eModeEmpty;
      return;
    }
    
    timeToShowInvalid--;
    return;
  }
  
  choose_room_cursor();
}

function handle_time()
{
  currentLoop++;
}

int timerSetAt[20];
int timerDurationInLoops[20];
int timerPausedRemaining[20];
bool timerIsPaused[20];

function StartTimerByLoops(int timerID, int durationInLoops)
{
  if (timerID < 1 || timerID > 20)
    return;

  timerDurationInLoops[timerID - 1] = durationInLoops;
  timerSetAt[timerID - 1] = currentLoop;
  SetTimer(timerID, durationInLoops);
}

function StartTimerBySeconds(int timerID, float durationInSeconds)
{
  if (timerID < 1 || timerID > 20)
    return;

  int gameSpeed = GetGameSpeed();
  int durationInLoops = FloatToInt(durationInSeconds * IntToFloat(gameSpeed));
  StartTimerByLoops(timerID, durationInLoops);
}

int GetTimeRemainingInLoops(int timerID)
{
  if (timerID < 1 || timerID > 20)
    return -1;

  int elapsedLoops = currentLoop - timerSetAt[timerID - 1];
  int remainingLoops = timerDurationInLoops[timerID - 1] - elapsedLoops;

  if (remainingLoops > 0)
    return remainingLoops;
  else
    return 0;
}

float GetTimeRemainingInSeconds(int timerID)
{
  int remainingLoops = GetTimeRemainingInLoops(timerID);
  if (remainingLoops <= 0)
    return 0.0;

  int gameSpeed = GetGameSpeed();
  if (gameSpeed <= 0)
    return 0.0;

  return IntToFloat(remainingLoops) / IntToFloat(gameSpeed);
}

function PauseTimer(int timerID)
{
  if (timerID < 1 || timerID > 20 || timerIsPaused[timerID - 1])
    return;

  timerPausedRemaining[timerID - 1] = GetTimeRemainingInLoops(timerID);
  timerIsPaused[timerID - 1] = true;
}

function ResumeTimer(int timerID)
{
  if (timerID < 1 || timerID > 20 || !timerIsPaused[timerID - 1])
    return;

  StartTimerByLoops(timerID, timerPausedRemaining[timerID - 1]);
  timerIsPaused[timerID - 1] = false;
}

int GetCurrentLoop()
{
  return currentLoop;
}

void MyNarrate(const string text)
{
}

int GetMax(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

int GetMin(int a, int b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

function GetFingerprint(InventoryItem* inventoryItem)
{
  if (!inventoryItem.IsFingerprintable())
  {
    Display("This doesn't have fingerprints POOP");
    return;
  }
  
  if (!inventoryItem.HasFingerprint())
  {
    Display("No fingerprint right now POOOP");
    return;
  }
  
  if (cEgo.ActiveInventory == iCompact)
  {
    if (!inventoryItem.HasUsedCompact())
    {
      Display("The compact powder settles onto the surface, clearly revealing a fingerprint. Now, you just need a way to preserve it.");
      inventoryItem.SetUsedCompact(true);
      return;
    }
    
    if (!inventoryItem.HasUsedTape())
    {
      Display("You've already applied the compact, clearly revelaing a fingerprint. Now, you just need a way to preserve it.");
      return;
    }
   
    Display("You’ve already collected fingerprints from here. There’s no need to gather more.");
    return;
  }
  
  if (cEgo.ActiveInventory == iTape)
  {
    if (!inventoryItem.HasUsedCompact())
    {
      Display("You’ll need to apply the compact first if you want to preserve the fingerprint.");
      return;
    }
    
    if (!inventoryItem.HasUsedTape())
    {
      Display("Clara gently presses the clear tape onto the surface, where the powder from the compact has revealed a faint fingerprint. She lifts the tape, preserving the print with precision, and slips it into her notebook for safekeeping.");
      inventoryItem.SetUsedTape(true);
      return;
    }
    
    Display("You’ve already collected fingerprints from here. There’s no need to gather more.");
    return;
  }
  
  /*
  if (cEgo.ActiveInventory == iCompact&Tape)
  {
    if (!inventoryItem.HasUsedCompact() && !inventoryItem.HasUsedTape())
    {
      Display("Clara gets the print");
      inventoryItem.SetUsedCompact(true);
      inventoryItem.SetUsedTape(true);
      return RUN_DIALOG_STOP_DIALOG;
    }
    
    if (inventoryItem.HasUsedCompact())
    {
      Display("Clara gets the print");
      inventoryItem.SetUsedTape(true);
      return RUN_DIALOG_STOP_DIALOG;
    }
    
    Display("You’ve already collected fingerprints from here. There’s no need to gather more.");
  }
  */
}