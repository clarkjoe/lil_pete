int currentLoop;

bool IsAnyGUIOpen() {
  for (int GUI_ID = 0; GUI_ID < Game.GUICount; GUI_ID++)
  {
    if (GUI_ID == 0 || GUI_ID == 1) continue;
    
    if (gui[GUI_ID].Visible)
    {
      //Display(String.Format("%d", gui[GUI_ID].ID));
      return true;
    }
  }
  return false;
}

bool cursorOnIconBarGUI()
{
  GUI *currentGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
  return currentGUI == gIconbar;
}

bool cursorOnInventoryGUI()
{
  GUI *currentGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
  return currentGUI == gInventory;
}

function handleCursorOnIconBarGUI()
{
  mouse.Mode = eModePointer;
}

bool cursorPreviouslyOnIconGui = false;
function choose_cursor()
{
  if (cursorOnIconBarGUI())
  {
    handleCursorOnIconBarGUI();
    return;
  }
  
  if (gInventory.Visible)
  {
    return;
  }
  
  if (mouse.Mode == eModeInvalid)
  {
    if (timeToShowInvalid < 0)
    {
      mouse.Mode = eModeEmpty;
      return;
    }
    
    timeToShowInvalid--;
    return;
  }
  
  if (mouse.Mode == eModeInvalid) return;
  
  mouse.Mode = eModeWalkto;
  
  if (Mouse.IsOverWalkableArea()) 
  {
    mouse.Mode = eModeWalkto;
  }

  if (Mouse.IsOverHotspot())
  {
    Hotspot* hoveredHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
    if (hoveredHotspot.IsInteractable()) mouse.Mode = eModeInteract;
  }

  if (Mouse.IsOverCharacter())
  {
    Character* overCharacter = Mouse.GetOverCharacter();
    
    if (overCharacter == null)
    {
      mouse.Mode = eModeInvalid;
    }
    else
    {
      mouse.Mode = eModeTalkto;
    }
  }

  if (Mouse.IsOverObject())
  {
    mouse.Mode = eModeInteract;
  }
  
  if(Mouse.IsOverCharacter() && Mouse.IsOverObject())
  {
    Character* hoveredCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
    Object* hoveredObject = Object.GetAtScreenXY(mouse.x, mouse.y);
    
    if (hoveredCharacter.y >= hoveredObject.Y)
    {
      mouse.Mode = eModeTalkto;
    }
    else
    {
      mouse.Mode = eModeInteract;
    }
  }
  
  if (invCursorToggle)
  {
    mouse.Mode = eModeUseinv;
  }
}

function handle_time()
{
  currentLoop++;
}

int timerSetAt[20];
int timerDurationInLoops[20];
int timerPausedRemaining[20];
bool timerIsPaused[20];

function StartTimerByLoops(int timerID, int durationInLoops)
{
  if (timerID < 1 || timerID > 20)
    return;

  timerDurationInLoops[timerID - 1] = durationInLoops;
  timerSetAt[timerID - 1] = currentLoop;
  SetTimer(timerID, durationInLoops);
}

function StartTimerBySeconds(int timerID, float durationInSeconds)
{
  if (timerID < 1 || timerID > 20)
    return;

  int gameSpeed = GetGameSpeed();
  int durationInLoops = FloatToInt(durationInSeconds * IntToFloat(gameSpeed));
  StartTimerByLoops(timerID, durationInLoops);
}

int GetTimeRemainingInLoops(int timerID)
{
  if (timerID < 1 || timerID > 20)
    return -1;

  int elapsedLoops = currentLoop - timerSetAt[timerID - 1];
  int remainingLoops = timerDurationInLoops[timerID - 1] - elapsedLoops;

  if (remainingLoops > 0)
    return remainingLoops;
  else
    return 0;
}

float GetTimeRemainingInSeconds(int timerID)
{
  int remainingLoops = GetTimeRemainingInLoops(timerID);
  if (remainingLoops <= 0)
    return 0.0;

  int gameSpeed = GetGameSpeed();
  if (gameSpeed <= 0)
    return 0.0;

  return IntToFloat(remainingLoops) / IntToFloat(gameSpeed);
}

function PauseTimer(int timerID)
{
  if (timerID < 1 || timerID > 20 || timerIsPaused[timerID - 1])
    return;

  timerPausedRemaining[timerID - 1] = GetTimeRemainingInLoops(timerID);
  timerIsPaused[timerID - 1] = true;
}

function ResumeTimer(int timerID)
{
  if (timerID < 1 || timerID > 20 || !timerIsPaused[timerID - 1])
    return;

  StartTimerByLoops(timerID, timerPausedRemaining[timerID - 1]);
  timerIsPaused[timerID - 1] = false;
}

int GetCurrentLoop()
{
  return currentLoop;
}

void MyNarrate(const string text)
{
}

int GetMax(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

int GetMin(int a, int b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}